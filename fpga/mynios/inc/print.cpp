void abort (void)
{
  while(1);
}

void setOff(int val){
  __asm__ __volatile__("stoff %[input1]"::[input1]"r"(val));
}

void* __eof__();
int malloc_index = 0;
void* malloc(int size){
  size = (size & (~0x03))+4;
  int idx = (int)__eof__();
  idx += malloc_index;
  malloc_index += size;
  return (void*)idx;
}

void mfree(int size){
  malloc_index -= size;
}

void flushCache(void* addr){
  IOWR(CACHE_CTL, 0, 0x80000000+(((int)addr)>>10));
  IOWR(CACHE_CTL, 0, 0);
}

int print(const char* str){
  int idx = 0;
  while(1){
    char tmp = str[idx];
    if(tmp=='\0')break;
    uart_write(tmp);
    idx++;
  }
}

int print(const char* str, int len){
  int idx = 0;
  int i;
  for(i=0;i<len;i++){
    char tmp = str[i];
    uart_write(tmp);
  }
}

int equal(const char* a,const  char* b, int maxlen){
  int i = 0;
  while(1){
    if(a[i]!=b[i]){
      return 0;
    }
    if(a[i]=='\0' && b[i]=='\0'){
      break;
    }
    if(a[i]=='\0' || b[i]=='\0'){
      return 0;
    }
    
    i++;
    if(maxlen>0){
      if(i>=maxlen){
        break;
      }
    }
  }
  return 1;
}

int scan(char* buff, int maxlen, int timeout){
  int idx = 0;
  while(1){
    int c = uart_read(timeout);
    if(c==-1){
      return 0;
    }
    if(maxlen>=0){
      if(idx>=maxlen){
        buff[idx] = (char)0;
        return 0;
      }
    }
    buff[idx] = (char)c;
    if(c==0){
      return 0;
    }
    idx++;
  }
  
}

int num10s[] = {
1000000000,
100000000,
10000000,
1000000,
100000,
10000,
1000,
100,
10,
1,
};

double num10d[] = {
1000000000,
100000000,
10000000,
1000000,
100000,
10000,
1000,
100,
10,
1,
};
double num10f[] = {
0.1,
0.01,
0.001,
0.0001,
0.00001,
0.000001,
0.0000001,
0.00000001,
0.000000001,
0.0000000001,
0.00000000001,
};

void printInt(int val)
{
  int idx;
  int i;
  int num;
  if(val>=0){
    num = val;
    uart_write('+');
  }else{
    num = -val;
    uart_write('-');
  }
  
  uart_write('0');
  int outNum;
  int flg = 0;
  for(idx = 0; idx < 10 ; idx++)
  {
    outNum = 0;
    int CmpNum = num10s[idx];
    for(i = 0; i < 10 ; i++)
    {
      if(num>=CmpNum)
      {
        num -= CmpNum;
        outNum++;
      }
      else
      {
        break;
      }
    }
    if(flg==1){
      uart_write('0' + outNum);
    }else{
      if(outNum!=0){
        uart_write('0' + outNum);
        flg = 1;
      }
    }
  }
}

void printInt(int val, int newline){
  printInt(val);
  uart_write('\r');
  uart_write('\n');
}

int scanInt(){
  char buff[10];
  int i;
  int j;
  int idx = 0;
  int neg = 0;
  for(i = 0; i < 10 ; i++)
  {
    char v = uart_read();
    if(i==0 && v=='-'){
      neg = 1;
    }else{
      if(v<'0'||v>'9'){
        break;
      }
      buff[idx++] = v;
    }
  }
  
  int val = 0;
  
  for(i = 0; i < idx ; i++)
  {
    for(j = 0; j < (int)(buff[i]-'0') ; j++)
    {
      val+=num10s[10-idx+i];
    }
  }
  if(neg){
    val=-val;
  }
  return val;
}

int printByte(int val){
  char* chardata = "0123456789ABCDEF";
  uart_write(chardata[(val>>4)&0x0F]);
  uart_write(chardata[(val)&0x0F]);
}



void memcpy(void *dst, const void *src, int len){
  for(int i=0;i<len;i++){
    ((char*)(dst))[i] = ((char*)(src))[i];
  }
}





int char_table[] = {
0x00000000,0x00000000,0x00000000,0x00000000, // 0x00
0x00000000,0x00000000,0x00000000,0x00000000, // 0x01
0x00000000,0x00000000,0x00000000,0x00000000, // 0x02
0x00000000,0x00000000,0x00000000,0x00000000, // 0x03
0x00000000,0x00000000,0x00000000,0x00000000, // 0x04
0x00000000,0x00000000,0x00000000,0x00000000, // 0x05
0x00000000,0x00000000,0x00000000,0x00000000, // 0x06
0x00000000,0x00000000,0x00000000,0x00000000, // 0x07
0x00000000,0x00000000,0x00000000,0x00000000, // 0x08
0x00000000,0x00000000,0x00000000,0x00000000, // 0x09
0x00000000,0x00000000,0x00000000,0x00000000, // 0x0A
0x00000000,0x00000000,0x00000000,0x00000000, // 0x0B
0x00000000,0x00000000,0x00000000,0x00000000, // 0x0C
0x00000000,0x00000000,0x00000000,0x00000000, // 0x0D
0x00000000,0x00000000,0x00000000,0x00000000, // 0x0E
0x00000000,0x00000000,0x00000000,0x00000000, // 0x0F
0x00000000,0x00000000,0x00000000,0x00000000, // 0x10
0x00000000,0x00000000,0x00000000,0x00000000, // 0x11
0x00000000,0x00000000,0x00000000,0x00000000, // 0x12
0x00000000,0x00000000,0x00000000,0x00000000, // 0x13
0x00000000,0x00000000,0x00000000,0x00000000, // 0x14
0x00000000,0x00000000,0x00000000,0x00000000, // 0x15
0x00000000,0x00000000,0x00000000,0x00000000, // 0x16
0x00000000,0x00000000,0x00000000,0x00000000, // 0x17
0x00000000,0x00000000,0x00000000,0x00000000, // 0x18
0x00000000,0x00000000,0x00000000,0x00000000, // 0x19
0x00000000,0x00000000,0x00000000,0x00000000, // 0x1A
0x00000000,0x00000000,0x00000000,0x00000000, // 0x1B
0x00000000,0x00000000,0x00000000,0x00000000, // 0x1C
0x00000000,0x00000000,0x00000000,0x00000000, // 0x1D
0x00000000,0x00000000,0x00000000,0x00000000, // 0x1E
0x00000000,0x00000000,0x00000000,0x00000000, // 0x1F
0x00000000,0x00000000,0x00000000,0x00000000, // 0x20 space 0x20
0x0000183C,0x3C3C1818,0x18001818,0x00000000, // 0x21 !
0x00636363,0x22000000,0x00000000,0x00000000, // 0x22 "
0x00000036,0x367F3636,0x367F3636,0x00000000, // 0x23 #
0x0C0C3E63,0x61603E03,0x0343633E,0x0C0C0000, // 0x24 $
0x00000000,0x00616306,0x0C183363,0x00000000, // 0x25 %
0x0000001C,0x36361C3B,0x6E66663B,0x00000000, // 0x26 &amp;
0x00303030,0x60000000,0x00000000,0x00000000, // 0x27 '
0x00000C18,0x18303030,0x3018180C,0x00000000, // 0x28 (
0x0000180C,0x0C060606,0x060C0C18,0x00000000, // 0x29 )
0x00000000,0x42663CFF,0x3C664200,0x00000000, // 0x2A *
0x00000000,0x181818FF,0x18181800,0x00000000, // 0x2B +
0x00000000,0x00000000,0x00001818,0x18300000, // 0x2C ,
0x00000000,0x000000FF,0x00000000,0x00000000, // 0x2D -
0x00000000,0x00000000,0x00001818,0x00000000, // 0x2E .
0x00000103,0x070E1C38,0x70E0C080,0x00000000, // 0x2F / (forward slash)
0x00003E63,0x63636B6B,0x6363633E,0x00000000, // 0x30 0 0x30
0x00000C1C,0x3C0C0C0C,0x0C0C0C3F,0x00000000, // 0x31 1
0x00003E63,0x03060C18,0x3061637F,0x00000000, // 0x32 2
0x00003E63,0x03031E03,0x0303633E,0x00000000, // 0x33 3
0x0000060E,0x1E366666,0x7F06060F,0x00000000, // 0x34 4
0x00007F60,0x60607E03,0x0363733E,0x00000000, // 0x35 5
0x00001C30,0x60607E63,0x6363633E,0x00000000, // 0x36 6
0x00007F63,0x0306060C,0x0C181818,0x00000000, // 0x37 7
0x00003E63,0x63633E63,0x6363633E,0x00000000, // 0x38 8
0x00003E63,0x6363633F,0x0303063C,0x00000000, // 0x39 9
0x00000000,0x00181800,0x00001818,0x00000000, // 0x3A :
0x00000000,0x00181800,0x00001818,0x18300000, // 0x3B ;
0x00000006,0x0C183060,0x30180C06,0x00000000, // 0x3C &lt;
0x00000000,0x00007E00,0x007E0000,0x00000000, // 0x3D =
0x00000060,0x30180C06,0x0C183060,0x00000000, // 0x3E &gt;
0x00003E63,0x63060C0C,0x0C000C0C,0x00000000, // 0x3F ?
0x00003E63,0x636F6B6B,0x6E60603E,0x00000000, // 0x40 @ 0x40
0x0000081C,0x36636363,0x7F636363,0x00000000, // 0x41 A
0x00007E33,0x33333E33,0x3333337E,0x00000000, // 0x42 B
0x00001E33,0x61606060,0x6061331E,0x00000000, // 0x43 C
0x00007C36,0x33333333,0x3333367C,0x00000000, // 0x44 D
0x00007F33,0x31343C34,0x3031337F,0x00000000, // 0x45 E
0x00007F33,0x31343C34,0x30303078,0x00000000, // 0x46 F
0x00001E33,0x6160606F,0x6363371D,0x00000000, // 0x47 G
0x00006363,0x63637F63,0x63636363,0x00000000, // 0x48 H
0x00003C18,0x18181818,0x1818183C,0x00000000, // 0x49 I
0x00000F06,0x06060606,0x0666663C,0x00000000, // 0x4A J
0x00007333,0x36363C36,0x36333373,0x00000000, // 0x4B K
0x00007830,0x30303030,0x3031337F,0x00000000, // 0x4C L
0x00006377,0x7F6B6363,0x63636363,0x00000000, // 0x4D M
0x00006363,0x737B7F6F,0x67636363,0x00000000, // 0x4E N
0x00001C36,0x63636363,0x6363361C,0x00000000, // 0x4F O
0x00007E33,0x33333E30,0x30303078,0x00000000, // 0x50 P   0x50
0x00003E63,0x63636363,0x636B6F3E,0x06070000, // 0x51 Q
0x00007E33,0x33333E36,0x36333373,0x00000000, // 0x52 R
0x00003E63,0x63301C06,0x0363633E,0x00000000, // 0x53 S
0x0000FFDB,0x99181818,0x1818183C,0x00000000, // 0x54 T
0x00006363,0x63636363,0x6363633E,0x00000000, // 0x55 U
0x00006363,0x63636363,0x63361C08,0x00000000, // 0x56 V
0x00006363,0x6363636B,0x6B7F3636,0x00000000, // 0x57 W
0x0000C3C3,0x663C1818,0x3C66C3C3,0x00000000, // 0x58 X
0x0000C3C3,0xC3663C18,0x1818183C,0x00000000, // 0x59 Y
0x00007F63,0x43060C18,0x3061637F,0x00000000, // 0x5A Z
0x00003C30,0x30303030,0x3030303C,0x00000000, // 0x5B [
0x000080C0,0xE070381C,0x0E070301,0x00000000, // 0x5C \ (back slash)
0x00003C0C,0x0C0C0C0C,0x0C0C0C3C,0x00000000, // 0x5D ]
0x081C3663,0x00000000,0x00000000,0x00000000, // 0x5E ^
0x00000000,0x00000000,0x00000000,0xFF000000, // 0x5F _
0x18180C00,0x00000000,0x00000000,0x00000000, // 0x60 `    0x60
0x00000000,0x003C4606,0x3E66663B,0x00000000, // 0x61 a
0x00007030,0x303C3633,0x3333336E,0x00000000, // 0x62 b
0x00000000,0x003E6360,0x6060633E,0x00000000, // 0x63 c
0x00000E06,0x061E3666,0x6666663B,0x00000000, // 0x64 d
0x00000000,0x003E6363,0x7E60633E,0x00000000, // 0x65 e
0x00001C36,0x32307C30,0x30303078,0x00000000, // 0x66 f
0x00000000,0x003B6666,0x66663E06,0x663C0000, // 0x67 g
0x00007030,0x30363B33,0x33333373,0x00000000, // 0x68 h
0x00000C0C,0x001C0C0C,0x0C0C0C1E,0x00000000, // 0x69 i
0x00000606,0x000E0606,0x06060666,0x663C0000, // 0x6A j
0x00007030,0x30333336,0x3C363373,0x00000000, // 0x6B k
0x00001C0C,0x0C0C0C0C,0x0C0C0C1E,0x00000000, // 0x6C l
0x00000000,0x006E7F6B,0x6B6B6B6B,0x00000000, // 0x6D m
0x00000000,0x006E3333,0x33333333,0x00000000, // 0x6E n
0x00000000,0x003E6363,0x6363633E,0x00000000, // 0x6F o
0x00000000,0x006E3333,0x33333E30,0x30780000, // 0x70 p    0x70
0x00000000,0x003B6666,0x66663E06,0x060F0000, // 0x71 q
0x00000000,0x006E3B33,0x30303078,0x00000000, // 0x72 r
0x00000000,0x003E6338,0x0E03633E,0x00000000, // 0x73 s
0x00000818,0x187E1818,0x18181B0E,0x00000000, // 0x74 t
0x00000000,0x00666666,0x6666663B,0x00000000, // 0x75 u
0x00000000,0x00636336,0x361C1C08,0x00000000, // 0x76 v
0x00000000,0x00636363,0x6B6B7F36,0x00000000, // 0x77 w
0x00000000,0x0063361C,0x1C1C3663,0x00000000, // 0x78 x
0x00000000,0x00636363,0x63633F03,0x063C0000, // 0x79 y
0x00000000,0x007F660C,0x1830637F,0x00000000, // 0x7A z
0x00000E18,0x18187018,0x1818180E,0x00000000, // 0x7B {
0x00001818,0x18181800,0x18181818,0x18000000, // 0x7C |
0x00007018,0x18180E18,0x18181870,0x00000000, // 0x7D }
0x00003B6E,0x00000000,0x00000000,0x00000000, // 0x7E ~
0x0070D8D8,0x70000000,0x00000000,0x00000000  // 0x7F DEL
};

int x;
int y;
int screenInit(){
  x = 0;
  y = 0;
  IOWR(VGA, VGA_BASE, 1024);//1024=2Mbyte

}
int printScreen(int chr){
  for(int j=0;j<16;j++){
    for(int i=0;i<8;i++){
      int val = char_table[j>>2]>>(  ((3-(j&3))<<3)  +  (i)  ) & 1;
      
      int calc_x = x * 8 + i;
      int calc_y = y * 16 + j;
      ((short*)(0x200000))[calc_x+calc_y*1024] = val?0xFFFF:0x0000;//at 2Mbyte
    }
  }
  x++;
  if(x==80 || (chr == 0x0A)){
    x=0;
    y++;
    if(y==30){
      y==0;
    }
  }
}
