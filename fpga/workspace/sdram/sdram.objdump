
sdram.elf:     file format elf32-littlenios2
sdram.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x020001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x00001044 memsz 0x00001044 flags r-x
    LOAD off    0x00002064 vaddr 0x02001064 paddr 0x02001638 align 2**12
         filesz 0x000005d4 memsz 0x000005d4 flags rw-
    LOAD off    0x00002c0c vaddr 0x02001c0c paddr 0x02001c0c align 2**12
         filesz 0x00000000 memsz 0x000002ac flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000ea0  020001b4  020001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000010  02001054  02001054  00002054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000005d4  02001064  02001638  00002064  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ac  02001c0c  02001c0c  00002c0c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00002638  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000378  00000000  00000000  00002660  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000502  00000000  00000000  000029d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00005b24  00000000  00000000  00002eda  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000015a8  00000000  00000000  000089fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003674  00000000  00000000  00009fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000500  00000000  00000000  0000d61c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000008f9  00000000  00000000  0000db1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000081e  00000000  00000000  0000e415  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000ec34  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  0000ec48  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000101c4  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000101c7  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000101d3  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000101d4  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000101d5  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000101d9  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000101dd  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000004  00000000  00000000  000101e1  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000004  00000000  00000000  000101e5  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000004  00000000  00000000  000101e9  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  000101ed  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000020  00000000  00000000  000101f0  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0003544b  00000000  00000000  00010210  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
020001b4 l    d  .text	00000000 .text
02001054 l    d  .rodata	00000000 .rodata
02001064 l    d  .rwdata	00000000 .rwdata
02001c0c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
020001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
020002c4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
020003f0 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
020005f0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0200066c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0200120c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
02000e04 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
02000ff0 l     F .text	00000040 alt_sim_halt
02000330 g     F .text	00000050 alt_main
02001c28 g     O .bss	00000100 alt_irq
02001638 g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
02000000 g     F .entry	0000000c __reset
02000020 g       *ABS*	00000000 __flash_exceptions_start
02001c24 g     O .bss	00000004 errno
02001c10 g     O .bss	00000004 alt_argv
0200960c g       *ABS*	00000000 _gp
0200108c g     O .rwdata	00000180 alt_fd_list
02001054 g       *ABS*	00000000 __DTOR_END__
00000000  w      *UND*	00000000 malloc
0200161c g     O .rwdata	00000004 alt_max_fd
02001634 g     O .rwdata	00000004 _global_impure_ptr
02001eb8 g       *ABS*	00000000 __bss_end
02000950 g     F .text	000000f8 alt_iic_isr_register
02000b58 g     F .text	0000010c alt_tick
02000908 g     F .text	00000048 alt_ic_irq_enabled
02000ac0 g     F .text	00000098 alt_alarm_stop
02001c18 g     O .bss	00000004 alt_irq_active
020000ec g     F .exceptions	000000c8 alt_irq_handler
02001064 g     O .rwdata	00000028 alt_dev_null
02000650 g     F .text	0000001c alt_dcache_flush_all
02001638 g       *ABS*	00000000 __ram_rwdata_end
02001614 g     O .rwdata	00000008 alt_dev_list
02001064 g       *ABS*	00000000 __ram_rodata_end
02001eb8 g       *ABS*	00000000 end
02001050 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
02000460 g     F .text	00000090 alt_avalon_timer_sc_init
02000e08 g     F .text	000001b0 __call_exitprocs
020001b4 g     F .text	0000003c _start
02001c1c g     O .bss	00000004 _alt_tick_rate
02001c20 g     O .bss	00000004 _alt_nticks
020003b4 g     F .text	0000003c alt_sys_init
02000cd0 g     F .text	00000134 __register_exitproc
02000fb8 g     F .text	00000038 __mulsi3
02001064 g       *ABS*	00000000 __ram_rwdata_start
02001054 g       *ABS*	00000000 __ram_rodata_start
02001eb8 g       *ABS*	00000000 __alt_stack_base
02001c0c g       *ABS*	00000000 __bss_start
020001f0 g     F .text	00000054 main
02001c14 g     O .bss	00000004 alt_envp
02001d28 g     O .bss	00000190 _atexit0
02001620 g     O .rwdata	00000004 alt_errno
02001054 g       *ABS*	00000000 __CTOR_END__
02001054 g       *ABS*	00000000 __flash_rodata_start
02001054 g       *ABS*	00000000 __DTOR_LIST__
02000380 g     F .text	00000034 alt_irq_init
02000a48 g     F .text	00000078 alt_release_fd
02000c84 g     F .text	00000014 atexit
02001630 g     O .rwdata	00000004 _impure_ptr
02001c0c g     O .bss	00000004 alt_argc
020006fc g     F .text	00000064 _do_dtors
02000000 g       *ABS*	00000000 __alt_mem_sdram_0
02000020 g       .exceptions	00000000 alt_irq_entry
0200160c g     O .rwdata	00000008 alt_fs_list
02000020 g       *ABS*	00000000 __ram_exceptions_start
0200077c g     F .text	00000050 alt_ic_isr_register
02001638 g       *ABS*	00000000 _edata
02001eb8 g       *ABS*	00000000 _end
020001b4 g       *ABS*	00000000 __ram_exceptions_end
02000868 g     F .text	000000a0 alt_ic_irq_disable
02000c64 g     F .text	00000020 altera_nios2_qsys_irq_init
02000c98 g     F .text	00000038 exit
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
02001030 g     F .text	00000020 _exit
02000760 g     F .text	0000001c alt_icache_flush_all
02001624 g     O .rwdata	00000004 alt_priority_mask
020007cc g     F .text	0000009c alt_ic_irq_enable
02001628 g     O .rwdata	00000008 alt_alarm_list
02000698 g     F .text	00000064 _do_ctors
020004f0 g     F .text	00000100 close
02000244 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

02000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000000:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000004:	08406d14 	ori	at,at,436
    jmp r1
 2000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

02000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 2000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000ec0 	call	20000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000306 	br	2000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 200008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 2000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 2000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 200009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 20000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 20000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000e8:	ef80083a 	eret

020000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000ec:	defff904 	addi	sp,sp,-28
 20000f0:	dfc00615 	stw	ra,24(sp)
 20000f4:	df000515 	stw	fp,20(sp)
 20000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 20000fc:	0005313a 	rdctl	r2,ipending
 2000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 2000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 2000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 200010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000110:	00800044 	movi	r2,1
 2000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 2000118:	e0ffff17 	ldw	r3,-4(fp)
 200011c:	e0bffe17 	ldw	r2,-8(fp)
 2000120:	1884703a 	and	r2,r3,r2
 2000124:	1005003a 	cmpeq	r2,r2,zero
 2000128:	1000161e 	bne	r2,zero,2000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200012c:	e0bffd17 	ldw	r2,-12(fp)
 2000130:	00c08034 	movhi	r3,512
 2000134:	18c70a04 	addi	r3,r3,7208
 2000138:	100490fa 	slli	r2,r2,3
 200013c:	10c5883a 	add	r2,r2,r3
 2000140:	11400017 	ldw	r5,0(r2)
 2000144:	e0bffd17 	ldw	r2,-12(fp)
 2000148:	00c08034 	movhi	r3,512
 200014c:	18c70a04 	addi	r3,r3,7208
 2000150:	100490fa 	slli	r2,r2,3
 2000154:	10c5883a 	add	r2,r2,r3
 2000158:	10800104 	addi	r2,r2,4
 200015c:	11000017 	ldw	r4,0(r2)
 2000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000164:	0005313a 	rdctl	r2,ipending
 2000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 200016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 2000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 2000174:	e0bfff17 	ldw	r2,-4(fp)
 2000178:	1004c03a 	cmpne	r2,r2,zero
 200017c:	103fe31e 	bne	r2,zero,200010c <alt_irq_handler+0x20>
 2000180:	00000706 	br	20001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 2000184:	e0bffe17 	ldw	r2,-8(fp)
 2000188:	1085883a 	add	r2,r2,r2
 200018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 2000190:	e0bffd17 	ldw	r2,-12(fp)
 2000194:	10800044 	addi	r2,r2,1
 2000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 200019c:	003fde06 	br	2000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 20001a0:	e037883a 	mov	sp,fp
 20001a4:	dfc00117 	ldw	ra,4(sp)
 20001a8:	df000017 	ldw	fp,0(sp)
 20001ac:	dec00204 	addi	sp,sp,8
 20001b0:	f800283a 	ret

Disassembly of section .text:

020001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 20001b4:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 20001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 20001bc:	06808034 	movhi	gp,512
    ori gp, gp, %lo(_gp)
 20001c0:	d6a58314 	ori	gp,gp,38412
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 20001c4:	00808034 	movhi	r2,512
    ori r2, r2, %lo(__bss_start)
 20001c8:	10870314 	ori	r2,r2,7180

    movhi r3, %hi(__bss_end)
 20001cc:	00c08034 	movhi	r3,512
    ori r3, r3, %lo(__bss_end)
 20001d0:	18c7ae14 	ori	r3,r3,7864

    beq r2, r3, 1f
 20001d4:	10c00326 	beq	r2,r3,20001e4 <_start+0x30>

0:
    stw zero, (r2)
 20001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 20001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 20001e0:	10fffd36 	bltu	r2,r3,20001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 20001e4:	20002440 	call	2000244 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 20001e8:	20003300 	call	2000330 <alt_main>

020001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 20001ec:	003fff06 	br	20001ec <alt_after_alt_main>

020001f0 <main>:
//#include <stdio.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"

int main() {
 20001f0:	defffd04 	addi	sp,sp,-12
 20001f4:	df000215 	stw	fp,8(sp)
 20001f8:	df000204 	addi	fp,sp,8
	int data = 0;
 20001fc:	e03fff15 	stw	zero,-4(fp)
	while (1) {
		int val = IORD(PIO_1_BASE, 0);
 2000200:	00810034 	movhi	r2,1024
 2000204:	10840804 	addi	r2,r2,4128
 2000208:	10800037 	ldwio	r2,0(r2)
 200020c:	e0bffe15 	stw	r2,-8(fp)

		if(val & 1){
 2000210:	e0bffe17 	ldw	r2,-8(fp)
 2000214:	1080004c 	andi	r2,r2,1
 2000218:	10803fcc 	andi	r2,r2,255
 200021c:	1005003a 	cmpeq	r2,r2,zero
 2000220:	1000031e 	bne	r2,zero,2000230 <main+0x40>
			data++;
 2000224:	e0bfff17 	ldw	r2,-4(fp)
 2000228:	10800044 	addi	r2,r2,1
 200022c:	e0bfff15 	stw	r2,-4(fp)
		}

		IOWR(PIO_0_BASE, 0, data);
 2000230:	00c10034 	movhi	r3,1024
 2000234:	18c40c04 	addi	r3,r3,4144
 2000238:	e0bfff17 	ldw	r2,-4(fp)
 200023c:	18800035 	stwio	r2,0(r3)

	}
 2000240:	003fef06 	br	2000200 <main+0x10>

02000244 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 2000244:	defffe04 	addi	sp,sp,-8
 2000248:	dfc00115 	stw	ra,4(sp)
 200024c:	df000015 	stw	fp,0(sp)
 2000250:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 2000254:	01008034 	movhi	r4,512
 2000258:	21058e04 	addi	r4,r4,5688
 200025c:	01408034 	movhi	r5,512
 2000260:	29441904 	addi	r5,r5,4196
 2000264:	01808034 	movhi	r6,512
 2000268:	31858e04 	addi	r6,r6,5688
 200026c:	20002c40 	call	20002c4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 2000270:	01008034 	movhi	r4,512
 2000274:	21000804 	addi	r4,r4,32
 2000278:	01408034 	movhi	r5,512
 200027c:	29400804 	addi	r5,r5,32
 2000280:	01808034 	movhi	r6,512
 2000284:	31806d04 	addi	r6,r6,436
 2000288:	20002c40 	call	20002c4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 200028c:	01008034 	movhi	r4,512
 2000290:	21041504 	addi	r4,r4,4180
 2000294:	01408034 	movhi	r5,512
 2000298:	29441504 	addi	r5,r5,4180
 200029c:	01808034 	movhi	r6,512
 20002a0:	31841904 	addi	r6,r6,4196
 20002a4:	20002c40 	call	20002c4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 20002a8:	20006500 	call	2000650 <alt_dcache_flush_all>
  alt_icache_flush_all();
 20002ac:	20007600 	call	2000760 <alt_icache_flush_all>
}
 20002b0:	e037883a 	mov	sp,fp
 20002b4:	dfc00117 	ldw	ra,4(sp)
 20002b8:	df000017 	ldw	fp,0(sp)
 20002bc:	dec00204 	addi	sp,sp,8
 20002c0:	f800283a 	ret

020002c4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 20002c4:	defffc04 	addi	sp,sp,-16
 20002c8:	df000315 	stw	fp,12(sp)
 20002cc:	df000304 	addi	fp,sp,12
 20002d0:	e13ffd15 	stw	r4,-12(fp)
 20002d4:	e17ffe15 	stw	r5,-8(fp)
 20002d8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 20002dc:	e0fffe17 	ldw	r3,-8(fp)
 20002e0:	e0bffd17 	ldw	r2,-12(fp)
 20002e4:	18800e26 	beq	r3,r2,2000320 <alt_load_section+0x5c>
  {
    while( to != end )
 20002e8:	00000a06 	br	2000314 <alt_load_section+0x50>
    {
      *to++ = *from++;
 20002ec:	e0bffd17 	ldw	r2,-12(fp)
 20002f0:	10c00017 	ldw	r3,0(r2)
 20002f4:	e0bffe17 	ldw	r2,-8(fp)
 20002f8:	10c00015 	stw	r3,0(r2)
 20002fc:	e0bffe17 	ldw	r2,-8(fp)
 2000300:	10800104 	addi	r2,r2,4
 2000304:	e0bffe15 	stw	r2,-8(fp)
 2000308:	e0bffd17 	ldw	r2,-12(fp)
 200030c:	10800104 	addi	r2,r2,4
 2000310:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 2000314:	e0fffe17 	ldw	r3,-8(fp)
 2000318:	e0bfff17 	ldw	r2,-4(fp)
 200031c:	18bff31e 	bne	r3,r2,20002ec <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 2000320:	e037883a 	mov	sp,fp
 2000324:	df000017 	ldw	fp,0(sp)
 2000328:	dec00104 	addi	sp,sp,4
 200032c:	f800283a 	ret

02000330 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2000330:	defffd04 	addi	sp,sp,-12
 2000334:	dfc00215 	stw	ra,8(sp)
 2000338:	df000115 	stw	fp,4(sp)
 200033c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2000340:	0009883a 	mov	r4,zero
 2000344:	20003800 	call	2000380 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 2000348:	20003b40 	call	20003b4 <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 200034c:	20006980 	call	2000698 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 2000350:	01008034 	movhi	r4,512
 2000354:	2101bf04 	addi	r4,r4,1788
 2000358:	2000c840 	call	2000c84 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 200035c:	d1218017 	ldw	r4,-31232(gp)
 2000360:	d1618117 	ldw	r5,-31228(gp)
 2000364:	d1a18217 	ldw	r6,-31224(gp)
 2000368:	20001f00 	call	20001f0 <main>
 200036c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 2000370:	01000044 	movi	r4,1
 2000374:	20004f00 	call	20004f0 <close>
  exit (result);
 2000378:	e13fff17 	ldw	r4,-4(fp)
 200037c:	2000c980 	call	2000c98 <exit>

02000380 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 2000380:	defffd04 	addi	sp,sp,-12
 2000384:	dfc00215 	stw	ra,8(sp)
 2000388:	df000115 	stw	fp,4(sp)
 200038c:	df000104 	addi	fp,sp,4
 2000390:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 2000394:	2000c640 	call	2000c64 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 2000398:	00800044 	movi	r2,1
 200039c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 20003a0:	e037883a 	mov	sp,fp
 20003a4:	dfc00117 	ldw	ra,4(sp)
 20003a8:	df000017 	ldw	fp,0(sp)
 20003ac:	dec00204 	addi	sp,sp,8
 20003b0:	f800283a 	ret

020003b4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 20003b4:	defffe04 	addi	sp,sp,-8
 20003b8:	dfc00115 	stw	ra,4(sp)
 20003bc:	df000015 	stw	fp,0(sp)
 20003c0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 20003c4:	01010034 	movhi	r4,1024
 20003c8:	21040004 	addi	r4,r4,4096
 20003cc:	000b883a 	mov	r5,zero
 20003d0:	000d883a 	mov	r6,zero
 20003d4:	01c0fa04 	movi	r7,1000
 20003d8:	20004600 	call	2000460 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
}
 20003dc:	e037883a 	mov	sp,fp
 20003e0:	dfc00117 	ldw	ra,4(sp)
 20003e4:	df000017 	ldw	fp,0(sp)
 20003e8:	dec00204 	addi	sp,sp,8
 20003ec:	f800283a 	ret

020003f0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 20003f0:	defffa04 	addi	sp,sp,-24
 20003f4:	dfc00515 	stw	ra,20(sp)
 20003f8:	df000415 	stw	fp,16(sp)
 20003fc:	df000404 	addi	fp,sp,16
 2000400:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 2000404:	e0bfff17 	ldw	r2,-4(fp)
 2000408:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 200040c:	e0bfff17 	ldw	r2,-4(fp)
 2000410:	10800104 	addi	r2,r2,4
 2000414:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2000418:	0005303a 	rdctl	r2,status
 200041c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2000420:	e0fffd17 	ldw	r3,-12(fp)
 2000424:	00bfff84 	movi	r2,-2
 2000428:	1884703a 	and	r2,r3,r2
 200042c:	1001703a 	wrctl	status,r2
  
  return context;
 2000430:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 2000434:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
 2000438:	2000b580 	call	2000b58 <alt_tick>
 200043c:	e0bffe17 	ldw	r2,-8(fp)
 2000440:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2000444:	e0bffc17 	ldw	r2,-16(fp)
 2000448:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 200044c:	e037883a 	mov	sp,fp
 2000450:	dfc00117 	ldw	ra,4(sp)
 2000454:	df000017 	ldw	fp,0(sp)
 2000458:	dec00204 	addi	sp,sp,8
 200045c:	f800283a 	ret

02000460 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 2000460:	defff804 	addi	sp,sp,-32
 2000464:	dfc00715 	stw	ra,28(sp)
 2000468:	df000615 	stw	fp,24(sp)
 200046c:	df000604 	addi	fp,sp,24
 2000470:	e13ffc15 	stw	r4,-16(fp)
 2000474:	e17ffd15 	stw	r5,-12(fp)
 2000478:	e1bffe15 	stw	r6,-8(fp)
 200047c:	e1ffff15 	stw	r7,-4(fp)
 2000480:	e0bfff17 	ldw	r2,-4(fp)
 2000484:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 2000488:	00808034 	movhi	r2,512
 200048c:	10870704 	addi	r2,r2,7196
 2000490:	10800017 	ldw	r2,0(r2)
 2000494:	1004c03a 	cmpne	r2,r2,zero
 2000498:	1000041e 	bne	r2,zero,20004ac <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 200049c:	00c08034 	movhi	r3,512
 20004a0:	18c70704 	addi	r3,r3,7196
 20004a4:	e0bffb17 	ldw	r2,-20(fp)
 20004a8:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 20004ac:	e0bffc17 	ldw	r2,-16(fp)
 20004b0:	10800104 	addi	r2,r2,4
 20004b4:	1007883a 	mov	r3,r2
 20004b8:	008001c4 	movi	r2,7
 20004bc:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 20004c0:	d8000015 	stw	zero,0(sp)
 20004c4:	e13ffd17 	ldw	r4,-12(fp)
 20004c8:	e17ffe17 	ldw	r5,-8(fp)
 20004cc:	01808034 	movhi	r6,512
 20004d0:	3180fc04 	addi	r6,r6,1008
 20004d4:	e1fffc17 	ldw	r7,-16(fp)
 20004d8:	200077c0 	call	200077c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 20004dc:	e037883a 	mov	sp,fp
 20004e0:	dfc00117 	ldw	ra,4(sp)
 20004e4:	df000017 	ldw	fp,0(sp)
 20004e8:	dec00204 	addi	sp,sp,8
 20004ec:	f800283a 	ret

020004f0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 20004f0:	defff804 	addi	sp,sp,-32
 20004f4:	dfc00715 	stw	ra,28(sp)
 20004f8:	df000615 	stw	fp,24(sp)
 20004fc:	df000604 	addi	fp,sp,24
 2000500:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 2000504:	e0bffc17 	ldw	r2,-16(fp)
 2000508:	1004803a 	cmplt	r2,r2,zero
 200050c:	1000091e 	bne	r2,zero,2000534 <close+0x44>
 2000510:	e13ffc17 	ldw	r4,-16(fp)
 2000514:	01400304 	movi	r5,12
 2000518:	2000fb80 	call	2000fb8 <__mulsi3>
 200051c:	1007883a 	mov	r3,r2
 2000520:	00808034 	movhi	r2,512
 2000524:	10842304 	addi	r2,r2,4236
 2000528:	1887883a 	add	r3,r3,r2
 200052c:	e0ffff15 	stw	r3,-4(fp)
 2000530:	00000106 	br	2000538 <close+0x48>
 2000534:	e03fff15 	stw	zero,-4(fp)
 2000538:	e0bfff17 	ldw	r2,-4(fp)
 200053c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 2000540:	e0bffb17 	ldw	r2,-20(fp)
 2000544:	1005003a 	cmpeq	r2,r2,zero
 2000548:	10001d1e 	bne	r2,zero,20005c0 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 200054c:	e0bffb17 	ldw	r2,-20(fp)
 2000550:	10800017 	ldw	r2,0(r2)
 2000554:	10800417 	ldw	r2,16(r2)
 2000558:	1005003a 	cmpeq	r2,r2,zero
 200055c:	1000071e 	bne	r2,zero,200057c <close+0x8c>
 2000560:	e0bffb17 	ldw	r2,-20(fp)
 2000564:	10800017 	ldw	r2,0(r2)
 2000568:	10800417 	ldw	r2,16(r2)
 200056c:	e13ffb17 	ldw	r4,-20(fp)
 2000570:	103ee83a 	callr	r2
 2000574:	e0bffe15 	stw	r2,-8(fp)
 2000578:	00000106 	br	2000580 <close+0x90>
 200057c:	e03ffe15 	stw	zero,-8(fp)
 2000580:	e0bffe17 	ldw	r2,-8(fp)
 2000584:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 2000588:	e13ffc17 	ldw	r4,-16(fp)
 200058c:	2000a480 	call	2000a48 <alt_release_fd>
    if (rval < 0)
 2000590:	e0bffa17 	ldw	r2,-24(fp)
 2000594:	1004403a 	cmpge	r2,r2,zero
 2000598:	1000071e 	bne	r2,zero,20005b8 <close+0xc8>
    {
      ALT_ERRNO = -rval;
 200059c:	20005f00 	call	20005f0 <alt_get_errno>
 20005a0:	e0fffa17 	ldw	r3,-24(fp)
 20005a4:	00c7c83a 	sub	r3,zero,r3
 20005a8:	10c00015 	stw	r3,0(r2)
      return -1;
 20005ac:	00bfffc4 	movi	r2,-1
 20005b0:	e0bffd15 	stw	r2,-12(fp)
 20005b4:	00000806 	br	20005d8 <close+0xe8>
    }
    return 0;
 20005b8:	e03ffd15 	stw	zero,-12(fp)
 20005bc:	00000606 	br	20005d8 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20005c0:	20005f00 	call	20005f0 <alt_get_errno>
 20005c4:	1007883a 	mov	r3,r2
 20005c8:	00801444 	movi	r2,81
 20005cc:	18800015 	stw	r2,0(r3)
    return -1;
 20005d0:	00bfffc4 	movi	r2,-1
 20005d4:	e0bffd15 	stw	r2,-12(fp)
 20005d8:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 20005dc:	e037883a 	mov	sp,fp
 20005e0:	dfc00117 	ldw	ra,4(sp)
 20005e4:	df000017 	ldw	fp,0(sp)
 20005e8:	dec00204 	addi	sp,sp,8
 20005ec:	f800283a 	ret

020005f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20005f0:	defffd04 	addi	sp,sp,-12
 20005f4:	dfc00215 	stw	ra,8(sp)
 20005f8:	df000115 	stw	fp,4(sp)
 20005fc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2000600:	00808034 	movhi	r2,512
 2000604:	10858804 	addi	r2,r2,5664
 2000608:	10800017 	ldw	r2,0(r2)
 200060c:	1005003a 	cmpeq	r2,r2,zero
 2000610:	1000061e 	bne	r2,zero,200062c <alt_get_errno+0x3c>
 2000614:	00808034 	movhi	r2,512
 2000618:	10858804 	addi	r2,r2,5664
 200061c:	10800017 	ldw	r2,0(r2)
 2000620:	103ee83a 	callr	r2
 2000624:	e0bfff15 	stw	r2,-4(fp)
 2000628:	00000306 	br	2000638 <alt_get_errno+0x48>
 200062c:	00808034 	movhi	r2,512
 2000630:	10870904 	addi	r2,r2,7204
 2000634:	e0bfff15 	stw	r2,-4(fp)
 2000638:	e0bfff17 	ldw	r2,-4(fp)
}
 200063c:	e037883a 	mov	sp,fp
 2000640:	dfc00117 	ldw	ra,4(sp)
 2000644:	df000017 	ldw	fp,0(sp)
 2000648:	dec00204 	addi	sp,sp,8
 200064c:	f800283a 	ret

02000650 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 2000650:	deffff04 	addi	sp,sp,-4
 2000654:	df000015 	stw	fp,0(sp)
 2000658:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 200065c:	e037883a 	mov	sp,fp
 2000660:	df000017 	ldw	fp,0(sp)
 2000664:	dec00104 	addi	sp,sp,4
 2000668:	f800283a 	ret

0200066c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 200066c:	defffc04 	addi	sp,sp,-16
 2000670:	df000315 	stw	fp,12(sp)
 2000674:	df000304 	addi	fp,sp,12
 2000678:	e13ffd15 	stw	r4,-12(fp)
 200067c:	e17ffe15 	stw	r5,-8(fp)
 2000680:	e1bfff15 	stw	r6,-4(fp)
  return len;
 2000684:	e0bfff17 	ldw	r2,-4(fp)
}
 2000688:	e037883a 	mov	sp,fp
 200068c:	df000017 	ldw	fp,0(sp)
 2000690:	dec00104 	addi	sp,sp,4
 2000694:	f800283a 	ret

02000698 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 2000698:	defffd04 	addi	sp,sp,-12
 200069c:	dfc00215 	stw	ra,8(sp)
 20006a0:	df000115 	stw	fp,4(sp)
 20006a4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 20006a8:	00bfff04 	movi	r2,-4
 20006ac:	00c08034 	movhi	r3,512
 20006b0:	18c41504 	addi	r3,r3,4180
 20006b4:	1885883a 	add	r2,r3,r2
 20006b8:	e0bfff15 	stw	r2,-4(fp)
 20006bc:	00000606 	br	20006d8 <_do_ctors+0x40>
        (*ctor) (); 
 20006c0:	e0bfff17 	ldw	r2,-4(fp)
 20006c4:	10800017 	ldw	r2,0(r2)
 20006c8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 20006cc:	e0bfff17 	ldw	r2,-4(fp)
 20006d0:	10bfff04 	addi	r2,r2,-4
 20006d4:	e0bfff15 	stw	r2,-4(fp)
 20006d8:	e0ffff17 	ldw	r3,-4(fp)
 20006dc:	00808034 	movhi	r2,512
 20006e0:	10841404 	addi	r2,r2,4176
 20006e4:	18bff62e 	bgeu	r3,r2,20006c0 <_do_ctors+0x28>
        (*ctor) (); 
}
 20006e8:	e037883a 	mov	sp,fp
 20006ec:	dfc00117 	ldw	ra,4(sp)
 20006f0:	df000017 	ldw	fp,0(sp)
 20006f4:	dec00204 	addi	sp,sp,8
 20006f8:	f800283a 	ret

020006fc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 20006fc:	defffd04 	addi	sp,sp,-12
 2000700:	dfc00215 	stw	ra,8(sp)
 2000704:	df000115 	stw	fp,4(sp)
 2000708:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 200070c:	00bfff04 	movi	r2,-4
 2000710:	00c08034 	movhi	r3,512
 2000714:	18c41504 	addi	r3,r3,4180
 2000718:	1885883a 	add	r2,r3,r2
 200071c:	e0bfff15 	stw	r2,-4(fp)
 2000720:	00000606 	br	200073c <_do_dtors+0x40>
        (*dtor) (); 
 2000724:	e0bfff17 	ldw	r2,-4(fp)
 2000728:	10800017 	ldw	r2,0(r2)
 200072c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2000730:	e0bfff17 	ldw	r2,-4(fp)
 2000734:	10bfff04 	addi	r2,r2,-4
 2000738:	e0bfff15 	stw	r2,-4(fp)
 200073c:	e0ffff17 	ldw	r3,-4(fp)
 2000740:	00808034 	movhi	r2,512
 2000744:	10841504 	addi	r2,r2,4180
 2000748:	18bff62e 	bgeu	r3,r2,2000724 <_do_dtors+0x28>
        (*dtor) (); 
}
 200074c:	e037883a 	mov	sp,fp
 2000750:	dfc00117 	ldw	ra,4(sp)
 2000754:	df000017 	ldw	fp,0(sp)
 2000758:	dec00204 	addi	sp,sp,8
 200075c:	f800283a 	ret

02000760 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 2000760:	deffff04 	addi	sp,sp,-4
 2000764:	df000015 	stw	fp,0(sp)
 2000768:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 200076c:	e037883a 	mov	sp,fp
 2000770:	df000017 	ldw	fp,0(sp)
 2000774:	dec00104 	addi	sp,sp,4
 2000778:	f800283a 	ret

0200077c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 200077c:	defff904 	addi	sp,sp,-28
 2000780:	dfc00615 	stw	ra,24(sp)
 2000784:	df000515 	stw	fp,20(sp)
 2000788:	df000504 	addi	fp,sp,20
 200078c:	e13ffc15 	stw	r4,-16(fp)
 2000790:	e17ffd15 	stw	r5,-12(fp)
 2000794:	e1bffe15 	stw	r6,-8(fp)
 2000798:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 200079c:	e0800217 	ldw	r2,8(fp)
 20007a0:	d8800015 	stw	r2,0(sp)
 20007a4:	e13ffc17 	ldw	r4,-16(fp)
 20007a8:	e17ffd17 	ldw	r5,-12(fp)
 20007ac:	e1bffe17 	ldw	r6,-8(fp)
 20007b0:	e1ffff17 	ldw	r7,-4(fp)
 20007b4:	20009500 	call	2000950 <alt_iic_isr_register>
}  
 20007b8:	e037883a 	mov	sp,fp
 20007bc:	dfc00117 	ldw	ra,4(sp)
 20007c0:	df000017 	ldw	fp,0(sp)
 20007c4:	dec00204 	addi	sp,sp,8
 20007c8:	f800283a 	ret

020007cc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 20007cc:	defff904 	addi	sp,sp,-28
 20007d0:	df000615 	stw	fp,24(sp)
 20007d4:	df000604 	addi	fp,sp,24
 20007d8:	e13ffe15 	stw	r4,-8(fp)
 20007dc:	e17fff15 	stw	r5,-4(fp)
 20007e0:	e0bfff17 	ldw	r2,-4(fp)
 20007e4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20007e8:	0005303a 	rdctl	r2,status
 20007ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20007f0:	e0fffb17 	ldw	r3,-20(fp)
 20007f4:	00bfff84 	movi	r2,-2
 20007f8:	1884703a 	and	r2,r3,r2
 20007fc:	1001703a 	wrctl	status,r2
  
  return context;
 2000800:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2000804:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 2000808:	e0fffc17 	ldw	r3,-16(fp)
 200080c:	00800044 	movi	r2,1
 2000810:	10c4983a 	sll	r2,r2,r3
 2000814:	1007883a 	mov	r3,r2
 2000818:	00808034 	movhi	r2,512
 200081c:	10870604 	addi	r2,r2,7192
 2000820:	10800017 	ldw	r2,0(r2)
 2000824:	1886b03a 	or	r3,r3,r2
 2000828:	00808034 	movhi	r2,512
 200082c:	10870604 	addi	r2,r2,7192
 2000830:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2000834:	00808034 	movhi	r2,512
 2000838:	10870604 	addi	r2,r2,7192
 200083c:	10800017 	ldw	r2,0(r2)
 2000840:	100170fa 	wrctl	ienable,r2
 2000844:	e0bffd17 	ldw	r2,-12(fp)
 2000848:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200084c:	e0bffa17 	ldw	r2,-24(fp)
 2000850:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2000854:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 2000858:	e037883a 	mov	sp,fp
 200085c:	df000017 	ldw	fp,0(sp)
 2000860:	dec00104 	addi	sp,sp,4
 2000864:	f800283a 	ret

02000868 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 2000868:	defff904 	addi	sp,sp,-28
 200086c:	df000615 	stw	fp,24(sp)
 2000870:	df000604 	addi	fp,sp,24
 2000874:	e13ffe15 	stw	r4,-8(fp)
 2000878:	e17fff15 	stw	r5,-4(fp)
 200087c:	e0bfff17 	ldw	r2,-4(fp)
 2000880:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2000884:	0005303a 	rdctl	r2,status
 2000888:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200088c:	e0fffb17 	ldw	r3,-20(fp)
 2000890:	00bfff84 	movi	r2,-2
 2000894:	1884703a 	and	r2,r3,r2
 2000898:	1001703a 	wrctl	status,r2
  
  return context;
 200089c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 20008a0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 20008a4:	e0fffc17 	ldw	r3,-16(fp)
 20008a8:	00800044 	movi	r2,1
 20008ac:	10c4983a 	sll	r2,r2,r3
 20008b0:	0084303a 	nor	r2,zero,r2
 20008b4:	1007883a 	mov	r3,r2
 20008b8:	00808034 	movhi	r2,512
 20008bc:	10870604 	addi	r2,r2,7192
 20008c0:	10800017 	ldw	r2,0(r2)
 20008c4:	1886703a 	and	r3,r3,r2
 20008c8:	00808034 	movhi	r2,512
 20008cc:	10870604 	addi	r2,r2,7192
 20008d0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 20008d4:	00808034 	movhi	r2,512
 20008d8:	10870604 	addi	r2,r2,7192
 20008dc:	10800017 	ldw	r2,0(r2)
 20008e0:	100170fa 	wrctl	ienable,r2
 20008e4:	e0bffd17 	ldw	r2,-12(fp)
 20008e8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20008ec:	e0bffa17 	ldw	r2,-24(fp)
 20008f0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 20008f4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 20008f8:	e037883a 	mov	sp,fp
 20008fc:	df000017 	ldw	fp,0(sp)
 2000900:	dec00104 	addi	sp,sp,4
 2000904:	f800283a 	ret

02000908 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 2000908:	defffc04 	addi	sp,sp,-16
 200090c:	df000315 	stw	fp,12(sp)
 2000910:	df000304 	addi	fp,sp,12
 2000914:	e13ffe15 	stw	r4,-8(fp)
 2000918:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 200091c:	000530fa 	rdctl	r2,ienable
 2000920:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 2000924:	e0ffff17 	ldw	r3,-4(fp)
 2000928:	00800044 	movi	r2,1
 200092c:	10c4983a 	sll	r2,r2,r3
 2000930:	1007883a 	mov	r3,r2
 2000934:	e0bffd17 	ldw	r2,-12(fp)
 2000938:	1884703a 	and	r2,r3,r2
 200093c:	1004c03a 	cmpne	r2,r2,zero
}
 2000940:	e037883a 	mov	sp,fp
 2000944:	df000017 	ldw	fp,0(sp)
 2000948:	dec00104 	addi	sp,sp,4
 200094c:	f800283a 	ret

02000950 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2000950:	defff404 	addi	sp,sp,-48
 2000954:	dfc00b15 	stw	ra,44(sp)
 2000958:	df000a15 	stw	fp,40(sp)
 200095c:	df000a04 	addi	fp,sp,40
 2000960:	e13ffb15 	stw	r4,-20(fp)
 2000964:	e17ffc15 	stw	r5,-16(fp)
 2000968:	e1bffd15 	stw	r6,-12(fp)
 200096c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 2000970:	00bffa84 	movi	r2,-22
 2000974:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 2000978:	e0bffc17 	ldw	r2,-16(fp)
 200097c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 2000980:	e0bff917 	ldw	r2,-28(fp)
 2000984:	10800808 	cmpgei	r2,r2,32
 2000988:	1000291e 	bne	r2,zero,2000a30 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200098c:	0005303a 	rdctl	r2,status
 2000990:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2000994:	e0fff717 	ldw	r3,-36(fp)
 2000998:	00bfff84 	movi	r2,-2
 200099c:	1884703a 	and	r2,r3,r2
 20009a0:	1001703a 	wrctl	status,r2
  
  return context;
 20009a4:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 20009a8:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 20009ac:	e0bff917 	ldw	r2,-28(fp)
 20009b0:	00c08034 	movhi	r3,512
 20009b4:	18c70a04 	addi	r3,r3,7208
 20009b8:	100490fa 	slli	r2,r2,3
 20009bc:	10c7883a 	add	r3,r2,r3
 20009c0:	e0bffd17 	ldw	r2,-12(fp)
 20009c4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 20009c8:	e0bff917 	ldw	r2,-28(fp)
 20009cc:	00c08034 	movhi	r3,512
 20009d0:	18c70a04 	addi	r3,r3,7208
 20009d4:	100490fa 	slli	r2,r2,3
 20009d8:	10c5883a 	add	r2,r2,r3
 20009dc:	10c00104 	addi	r3,r2,4
 20009e0:	e0bffe17 	ldw	r2,-8(fp)
 20009e4:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 20009e8:	e0bffd17 	ldw	r2,-12(fp)
 20009ec:	1005003a 	cmpeq	r2,r2,zero
 20009f0:	1000051e 	bne	r2,zero,2000a08 <alt_iic_isr_register+0xb8>
 20009f4:	e17ff917 	ldw	r5,-28(fp)
 20009f8:	e13ffb17 	ldw	r4,-20(fp)
 20009fc:	20007cc0 	call	20007cc <alt_ic_irq_enable>
 2000a00:	e0bfff15 	stw	r2,-4(fp)
 2000a04:	00000406 	br	2000a18 <alt_iic_isr_register+0xc8>
 2000a08:	e17ff917 	ldw	r5,-28(fp)
 2000a0c:	e13ffb17 	ldw	r4,-20(fp)
 2000a10:	20008680 	call	2000868 <alt_ic_irq_disable>
 2000a14:	e0bfff15 	stw	r2,-4(fp)
 2000a18:	e0bfff17 	ldw	r2,-4(fp)
 2000a1c:	e0bffa15 	stw	r2,-24(fp)
 2000a20:	e0bff817 	ldw	r2,-32(fp)
 2000a24:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2000a28:	e0bff617 	ldw	r2,-40(fp)
 2000a2c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 2000a30:	e0bffa17 	ldw	r2,-24(fp)
}
 2000a34:	e037883a 	mov	sp,fp
 2000a38:	dfc00117 	ldw	ra,4(sp)
 2000a3c:	df000017 	ldw	fp,0(sp)
 2000a40:	dec00204 	addi	sp,sp,8
 2000a44:	f800283a 	ret

02000a48 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 2000a48:	defffc04 	addi	sp,sp,-16
 2000a4c:	dfc00315 	stw	ra,12(sp)
 2000a50:	df000215 	stw	fp,8(sp)
 2000a54:	dc000115 	stw	r16,4(sp)
 2000a58:	df000104 	addi	fp,sp,4
 2000a5c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 2000a60:	e0bfff17 	ldw	r2,-4(fp)
 2000a64:	108000d0 	cmplti	r2,r2,3
 2000a68:	10000f1e 	bne	r2,zero,2000aa8 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 2000a6c:	e13fff17 	ldw	r4,-4(fp)
 2000a70:	04008034 	movhi	r16,512
 2000a74:	84042304 	addi	r16,r16,4236
 2000a78:	01400304 	movi	r5,12
 2000a7c:	2000fb80 	call	2000fb8 <__mulsi3>
 2000a80:	1405883a 	add	r2,r2,r16
 2000a84:	10800204 	addi	r2,r2,8
 2000a88:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 2000a8c:	e13fff17 	ldw	r4,-4(fp)
 2000a90:	04008034 	movhi	r16,512
 2000a94:	84042304 	addi	r16,r16,4236
 2000a98:	01400304 	movi	r5,12
 2000a9c:	2000fb80 	call	2000fb8 <__mulsi3>
 2000aa0:	1405883a 	add	r2,r2,r16
 2000aa4:	10000015 	stw	zero,0(r2)
  }
}
 2000aa8:	e037883a 	mov	sp,fp
 2000aac:	dfc00217 	ldw	ra,8(sp)
 2000ab0:	df000117 	ldw	fp,4(sp)
 2000ab4:	dc000017 	ldw	r16,0(sp)
 2000ab8:	dec00304 	addi	sp,sp,12
 2000abc:	f800283a 	ret

02000ac0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 2000ac0:	defffa04 	addi	sp,sp,-24
 2000ac4:	df000515 	stw	fp,20(sp)
 2000ac8:	df000504 	addi	fp,sp,20
 2000acc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2000ad0:	0005303a 	rdctl	r2,status
 2000ad4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2000ad8:	e0fffd17 	ldw	r3,-12(fp)
 2000adc:	00bfff84 	movi	r2,-2
 2000ae0:	1884703a 	and	r2,r3,r2
 2000ae4:	1001703a 	wrctl	status,r2
  
  return context;
 2000ae8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 2000aec:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 2000af0:	e0bfff17 	ldw	r2,-4(fp)
 2000af4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 2000af8:	e0bffc17 	ldw	r2,-16(fp)
 2000afc:	10c00017 	ldw	r3,0(r2)
 2000b00:	e0bffc17 	ldw	r2,-16(fp)
 2000b04:	10800117 	ldw	r2,4(r2)
 2000b08:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 2000b0c:	e0bffc17 	ldw	r2,-16(fp)
 2000b10:	10c00117 	ldw	r3,4(r2)
 2000b14:	e0bffc17 	ldw	r2,-16(fp)
 2000b18:	10800017 	ldw	r2,0(r2)
 2000b1c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 2000b20:	e0fffc17 	ldw	r3,-16(fp)
 2000b24:	e0bffc17 	ldw	r2,-16(fp)
 2000b28:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 2000b2c:	e0fffc17 	ldw	r3,-16(fp)
 2000b30:	e0bffc17 	ldw	r2,-16(fp)
 2000b34:	18800015 	stw	r2,0(r3)
 2000b38:	e0bffe17 	ldw	r2,-8(fp)
 2000b3c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2000b40:	e0bffb17 	ldw	r2,-20(fp)
 2000b44:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 2000b48:	e037883a 	mov	sp,fp
 2000b4c:	df000017 	ldw	fp,0(sp)
 2000b50:	dec00104 	addi	sp,sp,4
 2000b54:	f800283a 	ret

02000b58 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 2000b58:	defffb04 	addi	sp,sp,-20
 2000b5c:	dfc00415 	stw	ra,16(sp)
 2000b60:	df000315 	stw	fp,12(sp)
 2000b64:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 2000b68:	d0a00717 	ldw	r2,-32740(gp)
 2000b6c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 2000b70:	d0a18517 	ldw	r2,-31212(gp)
 2000b74:	10800044 	addi	r2,r2,1
 2000b78:	d0a18515 	stw	r2,-31212(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2000b7c:	00003106 	br	2000c44 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 2000b80:	e0bffe17 	ldw	r2,-8(fp)
 2000b84:	10800017 	ldw	r2,0(r2)
 2000b88:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 2000b8c:	e0bffe17 	ldw	r2,-8(fp)
 2000b90:	10800403 	ldbu	r2,16(r2)
 2000b94:	10803fcc 	andi	r2,r2,255
 2000b98:	1005003a 	cmpeq	r2,r2,zero
 2000b9c:	1000051e 	bne	r2,zero,2000bb4 <alt_tick+0x5c>
 2000ba0:	d0a18517 	ldw	r2,-31212(gp)
 2000ba4:	1004c03a 	cmpne	r2,r2,zero
 2000ba8:	1000021e 	bne	r2,zero,2000bb4 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 2000bac:	e0bffe17 	ldw	r2,-8(fp)
 2000bb0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 2000bb4:	e0bffe17 	ldw	r2,-8(fp)
 2000bb8:	10c00217 	ldw	r3,8(r2)
 2000bbc:	d0a18517 	ldw	r2,-31212(gp)
 2000bc0:	10c01e36 	bltu	r2,r3,2000c3c <alt_tick+0xe4>
 2000bc4:	e0bffe17 	ldw	r2,-8(fp)
 2000bc8:	10800403 	ldbu	r2,16(r2)
 2000bcc:	10803fcc 	andi	r2,r2,255
 2000bd0:	1004c03a 	cmpne	r2,r2,zero
 2000bd4:	1000191e 	bne	r2,zero,2000c3c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 2000bd8:	e0bffe17 	ldw	r2,-8(fp)
 2000bdc:	10c00317 	ldw	r3,12(r2)
 2000be0:	e0bffe17 	ldw	r2,-8(fp)
 2000be4:	11000517 	ldw	r4,20(r2)
 2000be8:	183ee83a 	callr	r3
 2000bec:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 2000bf0:	e0bffd17 	ldw	r2,-12(fp)
 2000bf4:	1004c03a 	cmpne	r2,r2,zero
 2000bf8:	1000031e 	bne	r2,zero,2000c08 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 2000bfc:	e13ffe17 	ldw	r4,-8(fp)
 2000c00:	2000ac00 	call	2000ac0 <alt_alarm_stop>
 2000c04:	00000d06 	br	2000c3c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 2000c08:	e0bffe17 	ldw	r2,-8(fp)
 2000c0c:	10c00217 	ldw	r3,8(r2)
 2000c10:	e0bffd17 	ldw	r2,-12(fp)
 2000c14:	1887883a 	add	r3,r3,r2
 2000c18:	e0bffe17 	ldw	r2,-8(fp)
 2000c1c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 2000c20:	e0bffe17 	ldw	r2,-8(fp)
 2000c24:	10c00217 	ldw	r3,8(r2)
 2000c28:	d0a18517 	ldw	r2,-31212(gp)
 2000c2c:	1880032e 	bgeu	r3,r2,2000c3c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 2000c30:	e0fffe17 	ldw	r3,-8(fp)
 2000c34:	00800044 	movi	r2,1
 2000c38:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 2000c3c:	e0bfff17 	ldw	r2,-4(fp)
 2000c40:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2000c44:	d0e00704 	addi	r3,gp,-32740
 2000c48:	e0bffe17 	ldw	r2,-8(fp)
 2000c4c:	10ffcc1e 	bne	r2,r3,2000b80 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 2000c50:	e037883a 	mov	sp,fp
 2000c54:	dfc00117 	ldw	ra,4(sp)
 2000c58:	df000017 	ldw	fp,0(sp)
 2000c5c:	dec00204 	addi	sp,sp,8
 2000c60:	f800283a 	ret

02000c64 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 2000c64:	deffff04 	addi	sp,sp,-4
 2000c68:	df000015 	stw	fp,0(sp)
 2000c6c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 2000c70:	000170fa 	wrctl	ienable,zero
}
 2000c74:	e037883a 	mov	sp,fp
 2000c78:	df000017 	ldw	fp,0(sp)
 2000c7c:	dec00104 	addi	sp,sp,4
 2000c80:	f800283a 	ret

02000c84 <atexit>:
 2000c84:	200b883a 	mov	r5,r4
 2000c88:	000d883a 	mov	r6,zero
 2000c8c:	0009883a 	mov	r4,zero
 2000c90:	000f883a 	mov	r7,zero
 2000c94:	2000cd01 	jmpi	2000cd0 <__register_exitproc>

02000c98 <exit>:
 2000c98:	defffe04 	addi	sp,sp,-8
 2000c9c:	000b883a 	mov	r5,zero
 2000ca0:	dc000015 	stw	r16,0(sp)
 2000ca4:	dfc00115 	stw	ra,4(sp)
 2000ca8:	2021883a 	mov	r16,r4
 2000cac:	2000e080 	call	2000e08 <__call_exitprocs>
 2000cb0:	00808034 	movhi	r2,512
 2000cb4:	10858d04 	addi	r2,r2,5684
 2000cb8:	11000017 	ldw	r4,0(r2)
 2000cbc:	20800f17 	ldw	r2,60(r4)
 2000cc0:	10000126 	beq	r2,zero,2000cc8 <exit+0x30>
 2000cc4:	103ee83a 	callr	r2
 2000cc8:	8009883a 	mov	r4,r16
 2000ccc:	20010300 	call	2001030 <_exit>

02000cd0 <__register_exitproc>:
 2000cd0:	defffa04 	addi	sp,sp,-24
 2000cd4:	00808034 	movhi	r2,512
 2000cd8:	10858d04 	addi	r2,r2,5684
 2000cdc:	dc000015 	stw	r16,0(sp)
 2000ce0:	14000017 	ldw	r16,0(r2)
 2000ce4:	dd000415 	stw	r20,16(sp)
 2000ce8:	2829883a 	mov	r20,r5
 2000cec:	81405217 	ldw	r5,328(r16)
 2000cf0:	dcc00315 	stw	r19,12(sp)
 2000cf4:	dc800215 	stw	r18,8(sp)
 2000cf8:	dc400115 	stw	r17,4(sp)
 2000cfc:	dfc00515 	stw	ra,20(sp)
 2000d00:	2023883a 	mov	r17,r4
 2000d04:	3027883a 	mov	r19,r6
 2000d08:	3825883a 	mov	r18,r7
 2000d0c:	28002526 	beq	r5,zero,2000da4 <__register_exitproc+0xd4>
 2000d10:	29000117 	ldw	r4,4(r5)
 2000d14:	008007c4 	movi	r2,31
 2000d18:	11002716 	blt	r2,r4,2000db8 <__register_exitproc+0xe8>
 2000d1c:	8800101e 	bne	r17,zero,2000d60 <__register_exitproc+0x90>
 2000d20:	2105883a 	add	r2,r4,r4
 2000d24:	1085883a 	add	r2,r2,r2
 2000d28:	20c00044 	addi	r3,r4,1
 2000d2c:	1145883a 	add	r2,r2,r5
 2000d30:	0009883a 	mov	r4,zero
 2000d34:	15000215 	stw	r20,8(r2)
 2000d38:	28c00115 	stw	r3,4(r5)
 2000d3c:	2005883a 	mov	r2,r4
 2000d40:	dfc00517 	ldw	ra,20(sp)
 2000d44:	dd000417 	ldw	r20,16(sp)
 2000d48:	dcc00317 	ldw	r19,12(sp)
 2000d4c:	dc800217 	ldw	r18,8(sp)
 2000d50:	dc400117 	ldw	r17,4(sp)
 2000d54:	dc000017 	ldw	r16,0(sp)
 2000d58:	dec00604 	addi	sp,sp,24
 2000d5c:	f800283a 	ret
 2000d60:	29802204 	addi	r6,r5,136
 2000d64:	00800044 	movi	r2,1
 2000d68:	110e983a 	sll	r7,r2,r4
 2000d6c:	30c04017 	ldw	r3,256(r6)
 2000d70:	2105883a 	add	r2,r4,r4
 2000d74:	1085883a 	add	r2,r2,r2
 2000d78:	1185883a 	add	r2,r2,r6
 2000d7c:	19c6b03a 	or	r3,r3,r7
 2000d80:	14802015 	stw	r18,128(r2)
 2000d84:	14c00015 	stw	r19,0(r2)
 2000d88:	00800084 	movi	r2,2
 2000d8c:	30c04015 	stw	r3,256(r6)
 2000d90:	88bfe31e 	bne	r17,r2,2000d20 <__register_exitproc+0x50>
 2000d94:	30804117 	ldw	r2,260(r6)
 2000d98:	11c4b03a 	or	r2,r2,r7
 2000d9c:	30804115 	stw	r2,260(r6)
 2000da0:	003fdf06 	br	2000d20 <__register_exitproc+0x50>
 2000da4:	00808034 	movhi	r2,512
 2000da8:	10874a04 	addi	r2,r2,7464
 2000dac:	100b883a 	mov	r5,r2
 2000db0:	80805215 	stw	r2,328(r16)
 2000db4:	003fd606 	br	2000d10 <__register_exitproc+0x40>
 2000db8:	00800034 	movhi	r2,0
 2000dbc:	10800004 	addi	r2,r2,0
 2000dc0:	1000021e 	bne	r2,zero,2000dcc <__register_exitproc+0xfc>
 2000dc4:	013fffc4 	movi	r4,-1
 2000dc8:	003fdc06 	br	2000d3c <__register_exitproc+0x6c>
 2000dcc:	01006404 	movi	r4,400
 2000dd0:	103ee83a 	callr	r2
 2000dd4:	1007883a 	mov	r3,r2
 2000dd8:	103ffa26 	beq	r2,zero,2000dc4 <__register_exitproc+0xf4>
 2000ddc:	80805217 	ldw	r2,328(r16)
 2000de0:	180b883a 	mov	r5,r3
 2000de4:	18000115 	stw	zero,4(r3)
 2000de8:	18800015 	stw	r2,0(r3)
 2000dec:	80c05215 	stw	r3,328(r16)
 2000df0:	18006215 	stw	zero,392(r3)
 2000df4:	18006315 	stw	zero,396(r3)
 2000df8:	0009883a 	mov	r4,zero
 2000dfc:	883fc826 	beq	r17,zero,2000d20 <__register_exitproc+0x50>
 2000e00:	003fd706 	br	2000d60 <__register_exitproc+0x90>

02000e04 <register_fini>:
 2000e04:	f800283a 	ret

02000e08 <__call_exitprocs>:
 2000e08:	00808034 	movhi	r2,512
 2000e0c:	10858d04 	addi	r2,r2,5684
 2000e10:	10800017 	ldw	r2,0(r2)
 2000e14:	defff304 	addi	sp,sp,-52
 2000e18:	df000b15 	stw	fp,44(sp)
 2000e1c:	d8800115 	stw	r2,4(sp)
 2000e20:	00800034 	movhi	r2,0
 2000e24:	10800004 	addi	r2,r2,0
 2000e28:	1005003a 	cmpeq	r2,r2,zero
 2000e2c:	d8800215 	stw	r2,8(sp)
 2000e30:	d8800117 	ldw	r2,4(sp)
 2000e34:	dd400815 	stw	r21,32(sp)
 2000e38:	dd000715 	stw	r20,28(sp)
 2000e3c:	10805204 	addi	r2,r2,328
 2000e40:	dfc00c15 	stw	ra,48(sp)
 2000e44:	ddc00a15 	stw	r23,40(sp)
 2000e48:	dd800915 	stw	r22,36(sp)
 2000e4c:	dcc00615 	stw	r19,24(sp)
 2000e50:	dc800515 	stw	r18,20(sp)
 2000e54:	dc400415 	stw	r17,16(sp)
 2000e58:	dc000315 	stw	r16,12(sp)
 2000e5c:	282b883a 	mov	r21,r5
 2000e60:	2039883a 	mov	fp,r4
 2000e64:	d8800015 	stw	r2,0(sp)
 2000e68:	2829003a 	cmpeq	r20,r5,zero
 2000e6c:	d8800117 	ldw	r2,4(sp)
 2000e70:	14405217 	ldw	r17,328(r2)
 2000e74:	88001026 	beq	r17,zero,2000eb8 <__call_exitprocs+0xb0>
 2000e78:	ddc00017 	ldw	r23,0(sp)
 2000e7c:	88800117 	ldw	r2,4(r17)
 2000e80:	8c802204 	addi	r18,r17,136
 2000e84:	143fffc4 	addi	r16,r2,-1
 2000e88:	80000916 	blt	r16,zero,2000eb0 <__call_exitprocs+0xa8>
 2000e8c:	05bfffc4 	movi	r22,-1
 2000e90:	a000151e 	bne	r20,zero,2000ee8 <__call_exitprocs+0xe0>
 2000e94:	8409883a 	add	r4,r16,r16
 2000e98:	2105883a 	add	r2,r4,r4
 2000e9c:	1485883a 	add	r2,r2,r18
 2000ea0:	10c02017 	ldw	r3,128(r2)
 2000ea4:	a8c01126 	beq	r21,r3,2000eec <__call_exitprocs+0xe4>
 2000ea8:	843fffc4 	addi	r16,r16,-1
 2000eac:	85bff81e 	bne	r16,r22,2000e90 <__call_exitprocs+0x88>
 2000eb0:	d8800217 	ldw	r2,8(sp)
 2000eb4:	10003126 	beq	r2,zero,2000f7c <__call_exitprocs+0x174>
 2000eb8:	dfc00c17 	ldw	ra,48(sp)
 2000ebc:	df000b17 	ldw	fp,44(sp)
 2000ec0:	ddc00a17 	ldw	r23,40(sp)
 2000ec4:	dd800917 	ldw	r22,36(sp)
 2000ec8:	dd400817 	ldw	r21,32(sp)
 2000ecc:	dd000717 	ldw	r20,28(sp)
 2000ed0:	dcc00617 	ldw	r19,24(sp)
 2000ed4:	dc800517 	ldw	r18,20(sp)
 2000ed8:	dc400417 	ldw	r17,16(sp)
 2000edc:	dc000317 	ldw	r16,12(sp)
 2000ee0:	dec00d04 	addi	sp,sp,52
 2000ee4:	f800283a 	ret
 2000ee8:	8409883a 	add	r4,r16,r16
 2000eec:	88c00117 	ldw	r3,4(r17)
 2000ef0:	2105883a 	add	r2,r4,r4
 2000ef4:	1445883a 	add	r2,r2,r17
 2000ef8:	18ffffc4 	addi	r3,r3,-1
 2000efc:	11800217 	ldw	r6,8(r2)
 2000f00:	1c001526 	beq	r3,r16,2000f58 <__call_exitprocs+0x150>
 2000f04:	10000215 	stw	zero,8(r2)
 2000f08:	303fe726 	beq	r6,zero,2000ea8 <__call_exitprocs+0xa0>
 2000f0c:	00c00044 	movi	r3,1
 2000f10:	1c06983a 	sll	r3,r3,r16
 2000f14:	90804017 	ldw	r2,256(r18)
 2000f18:	8cc00117 	ldw	r19,4(r17)
 2000f1c:	1884703a 	and	r2,r3,r2
 2000f20:	10001426 	beq	r2,zero,2000f74 <__call_exitprocs+0x16c>
 2000f24:	90804117 	ldw	r2,260(r18)
 2000f28:	1884703a 	and	r2,r3,r2
 2000f2c:	10000c1e 	bne	r2,zero,2000f60 <__call_exitprocs+0x158>
 2000f30:	2105883a 	add	r2,r4,r4
 2000f34:	1485883a 	add	r2,r2,r18
 2000f38:	11400017 	ldw	r5,0(r2)
 2000f3c:	e009883a 	mov	r4,fp
 2000f40:	303ee83a 	callr	r6
 2000f44:	88800117 	ldw	r2,4(r17)
 2000f48:	98bfc81e 	bne	r19,r2,2000e6c <__call_exitprocs+0x64>
 2000f4c:	b8800017 	ldw	r2,0(r23)
 2000f50:	147fd526 	beq	r2,r17,2000ea8 <__call_exitprocs+0xa0>
 2000f54:	003fc506 	br	2000e6c <__call_exitprocs+0x64>
 2000f58:	8c000115 	stw	r16,4(r17)
 2000f5c:	003fea06 	br	2000f08 <__call_exitprocs+0x100>
 2000f60:	2105883a 	add	r2,r4,r4
 2000f64:	1485883a 	add	r2,r2,r18
 2000f68:	11000017 	ldw	r4,0(r2)
 2000f6c:	303ee83a 	callr	r6
 2000f70:	003ff406 	br	2000f44 <__call_exitprocs+0x13c>
 2000f74:	303ee83a 	callr	r6
 2000f78:	003ff206 	br	2000f44 <__call_exitprocs+0x13c>
 2000f7c:	88800117 	ldw	r2,4(r17)
 2000f80:	1000081e 	bne	r2,zero,2000fa4 <__call_exitprocs+0x19c>
 2000f84:	89000017 	ldw	r4,0(r17)
 2000f88:	20000726 	beq	r4,zero,2000fa8 <__call_exitprocs+0x1a0>
 2000f8c:	b9000015 	stw	r4,0(r23)
 2000f90:	8809883a 	mov	r4,r17
 2000f94:	00000000 	call	0 <__reset-0x2000000>
 2000f98:	bc400017 	ldw	r17,0(r23)
 2000f9c:	883fb71e 	bne	r17,zero,2000e7c <__call_exitprocs+0x74>
 2000fa0:	003fc506 	br	2000eb8 <__call_exitprocs+0xb0>
 2000fa4:	89000017 	ldw	r4,0(r17)
 2000fa8:	882f883a 	mov	r23,r17
 2000fac:	2023883a 	mov	r17,r4
 2000fb0:	883fb21e 	bne	r17,zero,2000e7c <__call_exitprocs+0x74>
 2000fb4:	003fc006 	br	2000eb8 <__call_exitprocs+0xb0>

02000fb8 <__mulsi3>:
 2000fb8:	20000a26 	beq	r4,zero,2000fe4 <__mulsi3+0x2c>
 2000fbc:	0007883a 	mov	r3,zero
 2000fc0:	2080004c 	andi	r2,r4,1
 2000fc4:	1005003a 	cmpeq	r2,r2,zero
 2000fc8:	2008d07a 	srli	r4,r4,1
 2000fcc:	1000011e 	bne	r2,zero,2000fd4 <__mulsi3+0x1c>
 2000fd0:	1947883a 	add	r3,r3,r5
 2000fd4:	294b883a 	add	r5,r5,r5
 2000fd8:	203ff91e 	bne	r4,zero,2000fc0 <__mulsi3+0x8>
 2000fdc:	1805883a 	mov	r2,r3
 2000fe0:	f800283a 	ret
 2000fe4:	0007883a 	mov	r3,zero
 2000fe8:	1805883a 	mov	r2,r3
 2000fec:	f800283a 	ret

02000ff0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 2000ff0:	defffd04 	addi	sp,sp,-12
 2000ff4:	df000215 	stw	fp,8(sp)
 2000ff8:	df000204 	addi	fp,sp,8
 2000ffc:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 2001000:	e0bfff17 	ldw	r2,-4(fp)
 2001004:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 2001008:	e0bffe17 	ldw	r2,-8(fp)
 200100c:	1005003a 	cmpeq	r2,r2,zero
 2001010:	1000021e 	bne	r2,zero,200101c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 2001014:	002af070 	cmpltui	zero,zero,43969
 2001018:	00000106 	br	2001020 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 200101c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 2001020:	e037883a 	mov	sp,fp
 2001024:	df000017 	ldw	fp,0(sp)
 2001028:	dec00104 	addi	sp,sp,4
 200102c:	f800283a 	ret

02001030 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 2001030:	defffd04 	addi	sp,sp,-12
 2001034:	dfc00215 	stw	ra,8(sp)
 2001038:	df000115 	stw	fp,4(sp)
 200103c:	df000104 	addi	fp,sp,4
 2001040:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 2001044:	e13fff17 	ldw	r4,-4(fp)
 2001048:	2000ff00 	call	2000ff0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 200104c:	003fff06 	br	200104c <_exit+0x1c>
 2001050:	02000e04 	movi	r8,56
