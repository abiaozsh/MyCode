
qsys.elf:     file format elf32-littlenios2
qsys.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x000006e8 memsz 0x000006e8 flags r-x
    LOAD off    0x00001708 vaddr 0x00001708 paddr 0x000019b0 align 2**12
         filesz 0x000002a8 memsz 0x000002a8 flags rw-
    LOAD off    0x00001c58 vaddr 0x00001c58 paddr 0x00001c58 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000006dc  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  000016fc  000016fc  000016fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000002a8  00001708  000019b0  00001708  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000010  00001c58  00001c58  00001c58  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  000019b0  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001e8  00000000  00000000  000019d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000002d1  00000000  00000000  00001bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002c4f  00000000  00000000  00001e91  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000a8a  00000000  00000000  00004ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000021aa  00000000  00000000  0000556a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000002f0  00000000  00000000  00007714  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000072b  00000000  00000000  00007a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000004d2  00000000  00000000  0000812f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00008604  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000038  00000000  00000000  00008618  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0000966b  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  0000966e  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0000967a  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0000967b  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0000967c  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00009680  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00009684  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000004  00000000  00000000  00009688  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000004  00000000  00000000  0000968c  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000004  00000000  00000000  00009690  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000003  00000000  00000000  00009694  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001a  00000000  00000000  00009697  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00034de7  00000000  00000000  000096b1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .text	00000000 .text
000016fc l    d  .rodata	00000000 .rodata
00001708 l    d  .rwdata	00000000 .rwdata
00001c58 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
00001128 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_close.c
00001324 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000013a0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000014a0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 impure.c
000018b0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00001698 l     F .text	00000040 alt_sim_halt
00001194 g     F .text	00000040 alt_main
000019b0 g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
00001c64 g     O .bss	00000004 errno
00001c5c g     O .bss	00000004 alt_argv
00009990 g       *ABS*	00000000 _gp
00001730 g     O .rwdata	00000180 alt_fd_list
00001000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000019a0 g     O .rwdata	00000004 alt_max_fd
000019ac g     O .rwdata	00000004 _global_impure_ptr
00001c68 g       *ABS*	00000000 __bss_end
00001708 g     O .rwdata	00000028 alt_dev_null
00001384 g     F .text	0000001c alt_dcache_flush_all
000019b0 g       *ABS*	00000000 __ram_rwdata_end
00001998 g     O .rwdata	00000008 alt_dev_list
00001708 g       *ABS*	00000000 __ram_rodata_end
00001c68 g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
000014a4 g     F .text	000001bc __call_exitprocs
00001020 g     F .text	0000003c _start
00001208 g     F .text	0000001c alt_sys_init
00001660 g     F .text	00000038 __mulsi3
00001708 g       *ABS*	00000000 __ram_rwdata_start
000016fc g       *ABS*	00000000 __ram_rodata_start
00001c68 g       *ABS*	00000000 __alt_stack_base
00001c58 g       *ABS*	00000000 __bss_start
0000105c g     F .text	0000004c main
00001c60 g     O .bss	00000004 alt_envp
000019a4 g     O .rwdata	00000004 alt_errno
000016fc g       *ABS*	00000000 __flash_rodata_start
000011d4 g     F .text	00000034 alt_irq_init
000013e8 g     F .text	00000078 alt_release_fd
000019a8 g     O .rwdata	00000004 _impure_ptr
00001c58 g     O .bss	00000004 alt_argc
00001990 g     O .rwdata	00000008 alt_fs_list
00001020 g       *ABS*	00000000 __ram_exceptions_start
000019b0 g       *ABS*	00000000 _edata
00001c68 g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
00001460 g     F .text	00000020 altera_nios2_qsys_irq_init
000016d8 g     F .text	00000020 exit
00002000 g       *ABS*	00000000 __alt_data_end
000016d8 g     F .text	00000020 _exit
000013cc g     F .text	0000001c alt_icache_flush_all
00001224 g     F .text	00000100 close
000010a8 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00001020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a66414 	ori	gp,gp,39312
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	10871614 	ori	r2,r2,7256

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c71a14 	ori	r3,r3,7272

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	00010a80 	call	10a8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	00011940 	call	1194 <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <alt_after_alt_main>

0000105c <main>:
//#include <stdio.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"

int main() {
    105c:	defffd04 	addi	sp,sp,-12
    1060:	df000215 	stw	fp,8(sp)
    1064:	df000204 	addi	fp,sp,8
	int data = 0;
    1068:	e03fff15 	stw	zero,-4(fp)
	while (1) {
		int val = IORD(PIO_1_BASE, 0);
    106c:	008c0804 	movi	r2,12320
    1070:	10800037 	ldwio	r2,0(r2)
    1074:	e0bffe15 	stw	r2,-8(fp)

		if(val & 1){
    1078:	e0bffe17 	ldw	r2,-8(fp)
    107c:	1080004c 	andi	r2,r2,1
    1080:	10803fcc 	andi	r2,r2,255
    1084:	1005003a 	cmpeq	r2,r2,zero
    1088:	1000031e 	bne	r2,zero,1098 <main+0x3c>
			data++;
    108c:	e0bfff17 	ldw	r2,-4(fp)
    1090:	10800044 	addi	r2,r2,1
    1094:	e0bfff15 	stw	r2,-4(fp)
		}

		IOWR(PIO_0_BASE, 0, data);
    1098:	00cc0c04 	movi	r3,12336
    109c:	e0bfff17 	ldw	r2,-4(fp)
    10a0:	18800035 	stwio	r2,0(r3)

	}
    10a4:	003ff106 	br	106c <main+0x10>

000010a8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    10a8:	defffe04 	addi	sp,sp,-8
    10ac:	dfc00115 	stw	ra,4(sp)
    10b0:	df000015 	stw	fp,0(sp)
    10b4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    10b8:	01000034 	movhi	r4,0
    10bc:	21066c04 	addi	r4,r4,6576
    10c0:	01400034 	movhi	r5,0
    10c4:	2945c204 	addi	r5,r5,5896
    10c8:	01800034 	movhi	r6,0
    10cc:	31866c04 	addi	r6,r6,6576
    10d0:	00011280 	call	1128 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    10d4:	01000034 	movhi	r4,0
    10d8:	21040804 	addi	r4,r4,4128
    10dc:	01400034 	movhi	r5,0
    10e0:	29440804 	addi	r5,r5,4128
    10e4:	01800034 	movhi	r6,0
    10e8:	31840804 	addi	r6,r6,4128
    10ec:	00011280 	call	1128 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    10f0:	01000034 	movhi	r4,0
    10f4:	2105bf04 	addi	r4,r4,5884
    10f8:	01400034 	movhi	r5,0
    10fc:	2945bf04 	addi	r5,r5,5884
    1100:	01800034 	movhi	r6,0
    1104:	3185c204 	addi	r6,r6,5896
    1108:	00011280 	call	1128 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    110c:	00013840 	call	1384 <alt_dcache_flush_all>
  alt_icache_flush_all();
    1110:	00013cc0 	call	13cc <alt_icache_flush_all>
}
    1114:	e037883a 	mov	sp,fp
    1118:	dfc00117 	ldw	ra,4(sp)
    111c:	df000017 	ldw	fp,0(sp)
    1120:	dec00204 	addi	sp,sp,8
    1124:	f800283a 	ret

00001128 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    1128:	defffc04 	addi	sp,sp,-16
    112c:	df000315 	stw	fp,12(sp)
    1130:	df000304 	addi	fp,sp,12
    1134:	e13ffd15 	stw	r4,-12(fp)
    1138:	e17ffe15 	stw	r5,-8(fp)
    113c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    1140:	e0fffe17 	ldw	r3,-8(fp)
    1144:	e0bffd17 	ldw	r2,-12(fp)
    1148:	18800e26 	beq	r3,r2,1184 <alt_load_section+0x5c>
  {
    while( to != end )
    114c:	00000a06 	br	1178 <alt_load_section+0x50>
    {
      *to++ = *from++;
    1150:	e0bffd17 	ldw	r2,-12(fp)
    1154:	10c00017 	ldw	r3,0(r2)
    1158:	e0bffe17 	ldw	r2,-8(fp)
    115c:	10c00015 	stw	r3,0(r2)
    1160:	e0bffe17 	ldw	r2,-8(fp)
    1164:	10800104 	addi	r2,r2,4
    1168:	e0bffe15 	stw	r2,-8(fp)
    116c:	e0bffd17 	ldw	r2,-12(fp)
    1170:	10800104 	addi	r2,r2,4
    1174:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    1178:	e0fffe17 	ldw	r3,-8(fp)
    117c:	e0bfff17 	ldw	r2,-4(fp)
    1180:	18bff31e 	bne	r3,r2,1150 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    1184:	e037883a 	mov	sp,fp
    1188:	df000017 	ldw	fp,0(sp)
    118c:	dec00104 	addi	sp,sp,4
    1190:	f800283a 	ret

00001194 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1194:	defffd04 	addi	sp,sp,-12
    1198:	dfc00215 	stw	ra,8(sp)
    119c:	df000115 	stw	fp,4(sp)
    11a0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    11a4:	0009883a 	mov	r4,zero
    11a8:	00011d40 	call	11d4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    11ac:	00012080 	call	1208 <alt_sys_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    11b0:	d120b217 	ldw	r4,-32056(gp)
    11b4:	d160b317 	ldw	r5,-32052(gp)
    11b8:	d1a0b417 	ldw	r6,-32048(gp)
    11bc:	000105c0 	call	105c <main>
    11c0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    11c4:	01000044 	movi	r4,1
    11c8:	00012240 	call	1224 <close>
  exit (result);
    11cc:	e13fff17 	ldw	r4,-4(fp)
    11d0:	00016d80 	call	16d8 <_exit>

000011d4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    11d4:	defffd04 	addi	sp,sp,-12
    11d8:	dfc00215 	stw	ra,8(sp)
    11dc:	df000115 	stw	fp,4(sp)
    11e0:	df000104 	addi	fp,sp,4
    11e4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    11e8:	00014600 	call	1460 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    11ec:	00800044 	movi	r2,1
    11f0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    11f4:	e037883a 	mov	sp,fp
    11f8:	dfc00117 	ldw	ra,4(sp)
    11fc:	df000017 	ldw	fp,0(sp)
    1200:	dec00204 	addi	sp,sp,8
    1204:	f800283a 	ret

00001208 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    1208:	deffff04 	addi	sp,sp,-4
    120c:	df000015 	stw	fp,0(sp)
    1210:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
}
    1214:	e037883a 	mov	sp,fp
    1218:	df000017 	ldw	fp,0(sp)
    121c:	dec00104 	addi	sp,sp,4
    1220:	f800283a 	ret

00001224 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    1224:	defff804 	addi	sp,sp,-32
    1228:	dfc00715 	stw	ra,28(sp)
    122c:	df000615 	stw	fp,24(sp)
    1230:	df000604 	addi	fp,sp,24
    1234:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    1238:	e0bffc17 	ldw	r2,-16(fp)
    123c:	1004803a 	cmplt	r2,r2,zero
    1240:	1000091e 	bne	r2,zero,1268 <close+0x44>
    1244:	e13ffc17 	ldw	r4,-16(fp)
    1248:	01400304 	movi	r5,12
    124c:	00016600 	call	1660 <__mulsi3>
    1250:	1007883a 	mov	r3,r2
    1254:	00800034 	movhi	r2,0
    1258:	1085cc04 	addi	r2,r2,5936
    125c:	1887883a 	add	r3,r3,r2
    1260:	e0ffff15 	stw	r3,-4(fp)
    1264:	00000106 	br	126c <close+0x48>
    1268:	e03fff15 	stw	zero,-4(fp)
    126c:	e0bfff17 	ldw	r2,-4(fp)
    1270:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    1274:	e0bffb17 	ldw	r2,-20(fp)
    1278:	1005003a 	cmpeq	r2,r2,zero
    127c:	10001d1e 	bne	r2,zero,12f4 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    1280:	e0bffb17 	ldw	r2,-20(fp)
    1284:	10800017 	ldw	r2,0(r2)
    1288:	10800417 	ldw	r2,16(r2)
    128c:	1005003a 	cmpeq	r2,r2,zero
    1290:	1000071e 	bne	r2,zero,12b0 <close+0x8c>
    1294:	e0bffb17 	ldw	r2,-20(fp)
    1298:	10800017 	ldw	r2,0(r2)
    129c:	10800417 	ldw	r2,16(r2)
    12a0:	e13ffb17 	ldw	r4,-20(fp)
    12a4:	103ee83a 	callr	r2
    12a8:	e0bffe15 	stw	r2,-8(fp)
    12ac:	00000106 	br	12b4 <close+0x90>
    12b0:	e03ffe15 	stw	zero,-8(fp)
    12b4:	e0bffe17 	ldw	r2,-8(fp)
    12b8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    12bc:	e13ffc17 	ldw	r4,-16(fp)
    12c0:	00013e80 	call	13e8 <alt_release_fd>
    if (rval < 0)
    12c4:	e0bffa17 	ldw	r2,-24(fp)
    12c8:	1004403a 	cmpge	r2,r2,zero
    12cc:	1000071e 	bne	r2,zero,12ec <close+0xc8>
    {
      ALT_ERRNO = -rval;
    12d0:	00013240 	call	1324 <alt_get_errno>
    12d4:	e0fffa17 	ldw	r3,-24(fp)
    12d8:	00c7c83a 	sub	r3,zero,r3
    12dc:	10c00015 	stw	r3,0(r2)
      return -1;
    12e0:	00bfffc4 	movi	r2,-1
    12e4:	e0bffd15 	stw	r2,-12(fp)
    12e8:	00000806 	br	130c <close+0xe8>
    }
    return 0;
    12ec:	e03ffd15 	stw	zero,-12(fp)
    12f0:	00000606 	br	130c <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    12f4:	00013240 	call	1324 <alt_get_errno>
    12f8:	1007883a 	mov	r3,r2
    12fc:	00801444 	movi	r2,81
    1300:	18800015 	stw	r2,0(r3)
    return -1;
    1304:	00bfffc4 	movi	r2,-1
    1308:	e0bffd15 	stw	r2,-12(fp)
    130c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    1310:	e037883a 	mov	sp,fp
    1314:	dfc00117 	ldw	ra,4(sp)
    1318:	df000017 	ldw	fp,0(sp)
    131c:	dec00204 	addi	sp,sp,8
    1320:	f800283a 	ret

00001324 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1324:	defffd04 	addi	sp,sp,-12
    1328:	dfc00215 	stw	ra,8(sp)
    132c:	df000115 	stw	fp,4(sp)
    1330:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    1334:	00800034 	movhi	r2,0
    1338:	10866904 	addi	r2,r2,6564
    133c:	10800017 	ldw	r2,0(r2)
    1340:	1005003a 	cmpeq	r2,r2,zero
    1344:	1000061e 	bne	r2,zero,1360 <alt_get_errno+0x3c>
    1348:	00800034 	movhi	r2,0
    134c:	10866904 	addi	r2,r2,6564
    1350:	10800017 	ldw	r2,0(r2)
    1354:	103ee83a 	callr	r2
    1358:	e0bfff15 	stw	r2,-4(fp)
    135c:	00000306 	br	136c <alt_get_errno+0x48>
    1360:	00800034 	movhi	r2,0
    1364:	10871904 	addi	r2,r2,7268
    1368:	e0bfff15 	stw	r2,-4(fp)
    136c:	e0bfff17 	ldw	r2,-4(fp)
}
    1370:	e037883a 	mov	sp,fp
    1374:	dfc00117 	ldw	ra,4(sp)
    1378:	df000017 	ldw	fp,0(sp)
    137c:	dec00204 	addi	sp,sp,8
    1380:	f800283a 	ret

00001384 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1384:	deffff04 	addi	sp,sp,-4
    1388:	df000015 	stw	fp,0(sp)
    138c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    1390:	e037883a 	mov	sp,fp
    1394:	df000017 	ldw	fp,0(sp)
    1398:	dec00104 	addi	sp,sp,4
    139c:	f800283a 	ret

000013a0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    13a0:	defffc04 	addi	sp,sp,-16
    13a4:	df000315 	stw	fp,12(sp)
    13a8:	df000304 	addi	fp,sp,12
    13ac:	e13ffd15 	stw	r4,-12(fp)
    13b0:	e17ffe15 	stw	r5,-8(fp)
    13b4:	e1bfff15 	stw	r6,-4(fp)
  return len;
    13b8:	e0bfff17 	ldw	r2,-4(fp)
}
    13bc:	e037883a 	mov	sp,fp
    13c0:	df000017 	ldw	fp,0(sp)
    13c4:	dec00104 	addi	sp,sp,4
    13c8:	f800283a 	ret

000013cc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    13cc:	deffff04 	addi	sp,sp,-4
    13d0:	df000015 	stw	fp,0(sp)
    13d4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    13d8:	e037883a 	mov	sp,fp
    13dc:	df000017 	ldw	fp,0(sp)
    13e0:	dec00104 	addi	sp,sp,4
    13e4:	f800283a 	ret

000013e8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    13e8:	defffc04 	addi	sp,sp,-16
    13ec:	dfc00315 	stw	ra,12(sp)
    13f0:	df000215 	stw	fp,8(sp)
    13f4:	dc000115 	stw	r16,4(sp)
    13f8:	df000104 	addi	fp,sp,4
    13fc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    1400:	e0bfff17 	ldw	r2,-4(fp)
    1404:	108000d0 	cmplti	r2,r2,3
    1408:	10000f1e 	bne	r2,zero,1448 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    140c:	e13fff17 	ldw	r4,-4(fp)
    1410:	04000034 	movhi	r16,0
    1414:	8405cc04 	addi	r16,r16,5936
    1418:	01400304 	movi	r5,12
    141c:	00016600 	call	1660 <__mulsi3>
    1420:	1405883a 	add	r2,r2,r16
    1424:	10800204 	addi	r2,r2,8
    1428:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    142c:	e13fff17 	ldw	r4,-4(fp)
    1430:	04000034 	movhi	r16,0
    1434:	8405cc04 	addi	r16,r16,5936
    1438:	01400304 	movi	r5,12
    143c:	00016600 	call	1660 <__mulsi3>
    1440:	1405883a 	add	r2,r2,r16
    1444:	10000015 	stw	zero,0(r2)
  }
}
    1448:	e037883a 	mov	sp,fp
    144c:	dfc00217 	ldw	ra,8(sp)
    1450:	df000117 	ldw	fp,4(sp)
    1454:	dc000017 	ldw	r16,0(sp)
    1458:	dec00304 	addi	sp,sp,12
    145c:	f800283a 	ret

00001460 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    1460:	deffff04 	addi	sp,sp,-4
    1464:	df000015 	stw	fp,0(sp)
    1468:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    146c:	000170fa 	wrctl	ienable,zero
}
    1470:	e037883a 	mov	sp,fp
    1474:	df000017 	ldw	fp,0(sp)
    1478:	dec00104 	addi	sp,sp,4
    147c:	f800283a 	ret
    1480:	defffe04 	addi	sp,sp,-8
    1484:	dc400015 	stw	r17,0(sp)
    1488:	000b883a 	mov	r5,zero
    148c:	2023883a 	mov	r17,r4
    1490:	dfc00115 	stw	ra,4(sp)
    1494:	00014a40 	call	14a4 <__call_exitprocs>
    1498:	8809883a 	mov	r4,r17
    149c:	00016d80 	call	16d8 <_exit>

000014a0 <register_fini>:
    14a0:	f800283a 	ret

000014a4 <__call_exitprocs>:
    14a4:	defff304 	addi	sp,sp,-52
    14a8:	00800034 	movhi	r2,0
    14ac:	10866b04 	addi	r2,r2,6572
    14b0:	df000b15 	stw	fp,44(sp)
    14b4:	17000017 	ldw	fp,0(r2)
    14b8:	00800034 	movhi	r2,0
    14bc:	10800004 	addi	r2,r2,0
    14c0:	1005003a 	cmpeq	r2,r2,zero
    14c4:	d8800215 	stw	r2,8(sp)
    14c8:	e0800c04 	addi	r2,fp,48
    14cc:	dd800915 	stw	r22,36(sp)
    14d0:	dd400815 	stw	r21,32(sp)
    14d4:	dfc00c15 	stw	ra,48(sp)
    14d8:	ddc00a15 	stw	r23,40(sp)
    14dc:	dd000715 	stw	r20,28(sp)
    14e0:	dcc00615 	stw	r19,24(sp)
    14e4:	dc800515 	stw	r18,20(sp)
    14e8:	dc400415 	stw	r17,16(sp)
    14ec:	dc000315 	stw	r16,12(sp)
    14f0:	282d883a 	mov	r22,r5
    14f4:	d9000115 	stw	r4,4(sp)
    14f8:	d8800015 	stw	r2,0(sp)
    14fc:	282b003a 	cmpeq	r21,r5,zero
    1500:	e4400c17 	ldw	r17,48(fp)
    1504:	88001226 	beq	r17,zero,1550 <__call_exitprocs+0xac>
    1508:	ddc00017 	ldw	r23,0(sp)
    150c:	88800117 	ldw	r2,4(r17)
    1510:	8c802217 	ldw	r18,136(r17)
    1514:	143fffc4 	addi	r16,r2,-1
    1518:	80000b16 	blt	r16,zero,1548 <__call_exitprocs+0xa4>
    151c:	9027003a 	cmpeq	r19,r18,zero
    1520:	a800171e 	bne	r21,zero,1580 <__call_exitprocs+0xdc>
    1524:	9800051e 	bne	r19,zero,153c <__call_exitprocs+0x98>
    1528:	8409883a 	add	r4,r16,r16
    152c:	2105883a 	add	r2,r4,r4
    1530:	1485883a 	add	r2,r2,r18
    1534:	10c02017 	ldw	r3,128(r2)
    1538:	b0c01226 	beq	r22,r3,1584 <__call_exitprocs+0xe0>
    153c:	843fffc4 	addi	r16,r16,-1
    1540:	00bfffc4 	movi	r2,-1
    1544:	80bff61e 	bne	r16,r2,1520 <__call_exitprocs+0x7c>
    1548:	d8800217 	ldw	r2,8(sp)
    154c:	10003226 	beq	r2,zero,1618 <__call_exitprocs+0x174>
    1550:	dfc00c17 	ldw	ra,48(sp)
    1554:	df000b17 	ldw	fp,44(sp)
    1558:	ddc00a17 	ldw	r23,40(sp)
    155c:	dd800917 	ldw	r22,36(sp)
    1560:	dd400817 	ldw	r21,32(sp)
    1564:	dd000717 	ldw	r20,28(sp)
    1568:	dcc00617 	ldw	r19,24(sp)
    156c:	dc800517 	ldw	r18,20(sp)
    1570:	dc400417 	ldw	r17,16(sp)
    1574:	dc000317 	ldw	r16,12(sp)
    1578:	dec00d04 	addi	sp,sp,52
    157c:	f800283a 	ret
    1580:	8409883a 	add	r4,r16,r16
    1584:	88c00117 	ldw	r3,4(r17)
    1588:	2105883a 	add	r2,r4,r4
    158c:	1445883a 	add	r2,r2,r17
    1590:	18ffffc4 	addi	r3,r3,-1
    1594:	11800217 	ldw	r6,8(r2)
    1598:	1c001826 	beq	r3,r16,15fc <__call_exitprocs+0x158>
    159c:	10000215 	stw	zero,8(r2)
    15a0:	303fe626 	beq	r6,zero,153c <__call_exitprocs+0x98>
    15a4:	8d000117 	ldw	r20,4(r17)
    15a8:	9800121e 	bne	r19,zero,15f4 <__call_exitprocs+0x150>
    15ac:	00c00044 	movi	r3,1
    15b0:	1c06983a 	sll	r3,r3,r16
    15b4:	90804017 	ldw	r2,256(r18)
    15b8:	1884703a 	and	r2,r3,r2
    15bc:	10000d26 	beq	r2,zero,15f4 <__call_exitprocs+0x150>
    15c0:	90804117 	ldw	r2,260(r18)
    15c4:	1884703a 	and	r2,r3,r2
    15c8:	10000e1e 	bne	r2,zero,1604 <__call_exitprocs+0x160>
    15cc:	2105883a 	add	r2,r4,r4
    15d0:	1485883a 	add	r2,r2,r18
    15d4:	11400017 	ldw	r5,0(r2)
    15d8:	d9000117 	ldw	r4,4(sp)
    15dc:	303ee83a 	callr	r6
    15e0:	88800117 	ldw	r2,4(r17)
    15e4:	a0bfc61e 	bne	r20,r2,1500 <__call_exitprocs+0x5c>
    15e8:	b8800017 	ldw	r2,0(r23)
    15ec:	147fd326 	beq	r2,r17,153c <__call_exitprocs+0x98>
    15f0:	003fc306 	br	1500 <__call_exitprocs+0x5c>
    15f4:	303ee83a 	callr	r6
    15f8:	003ff906 	br	15e0 <__call_exitprocs+0x13c>
    15fc:	8c000115 	stw	r16,4(r17)
    1600:	003fe706 	br	15a0 <__call_exitprocs+0xfc>
    1604:	2105883a 	add	r2,r4,r4
    1608:	1485883a 	add	r2,r2,r18
    160c:	11000017 	ldw	r4,0(r2)
    1610:	303ee83a 	callr	r6
    1614:	003ff206 	br	15e0 <__call_exitprocs+0x13c>
    1618:	88800117 	ldw	r2,4(r17)
    161c:	10000b1e 	bne	r2,zero,164c <__call_exitprocs+0x1a8>
    1620:	89000017 	ldw	r4,0(r17)
    1624:	20000a26 	beq	r4,zero,1650 <__call_exitprocs+0x1ac>
    1628:	b9000015 	stw	r4,0(r23)
    162c:	90000226 	beq	r18,zero,1638 <__call_exitprocs+0x194>
    1630:	9009883a 	mov	r4,r18
    1634:	00000000 	call	0 <__reset-0x1000>
    1638:	8809883a 	mov	r4,r17
    163c:	00000000 	call	0 <__reset-0x1000>
    1640:	bc400017 	ldw	r17,0(r23)
    1644:	883fb11e 	bne	r17,zero,150c <__call_exitprocs+0x68>
    1648:	003fc106 	br	1550 <__call_exitprocs+0xac>
    164c:	89000017 	ldw	r4,0(r17)
    1650:	882f883a 	mov	r23,r17
    1654:	2023883a 	mov	r17,r4
    1658:	883fac1e 	bne	r17,zero,150c <__call_exitprocs+0x68>
    165c:	003fbc06 	br	1550 <__call_exitprocs+0xac>

00001660 <__mulsi3>:
    1660:	20000a26 	beq	r4,zero,168c <__mulsi3+0x2c>
    1664:	0007883a 	mov	r3,zero
    1668:	2080004c 	andi	r2,r4,1
    166c:	1005003a 	cmpeq	r2,r2,zero
    1670:	2008d07a 	srli	r4,r4,1
    1674:	1000011e 	bne	r2,zero,167c <__mulsi3+0x1c>
    1678:	1947883a 	add	r3,r3,r5
    167c:	294b883a 	add	r5,r5,r5
    1680:	203ff91e 	bne	r4,zero,1668 <__mulsi3+0x8>
    1684:	1805883a 	mov	r2,r3
    1688:	f800283a 	ret
    168c:	0007883a 	mov	r3,zero
    1690:	1805883a 	mov	r2,r3
    1694:	f800283a 	ret

00001698 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    1698:	defffd04 	addi	sp,sp,-12
    169c:	df000215 	stw	fp,8(sp)
    16a0:	df000204 	addi	fp,sp,8
    16a4:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    16a8:	e0bfff17 	ldw	r2,-4(fp)
    16ac:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    16b0:	e0bffe17 	ldw	r2,-8(fp)
    16b4:	1005003a 	cmpeq	r2,r2,zero
    16b8:	1000021e 	bne	r2,zero,16c4 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    16bc:	002af070 	cmpltui	zero,zero,43969
    16c0:	00000106 	br	16c8 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    16c4:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    16c8:	e037883a 	mov	sp,fp
    16cc:	df000017 	ldw	fp,0(sp)
    16d0:	dec00104 	addi	sp,sp,4
    16d4:	f800283a 	ret

000016d8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    16d8:	defffd04 	addi	sp,sp,-12
    16dc:	dfc00215 	stw	ra,8(sp)
    16e0:	df000115 	stw	fp,4(sp)
    16e4:	df000104 	addi	fp,sp,4
    16e8:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    16ec:	e13fff17 	ldw	r4,-4(fp)
    16f0:	00016980 	call	1698 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    16f4:	003fff06 	br	16f4 <_exit+0x1c>
    16f8:	000014a0 	cmpeqi	zero,zero,82
