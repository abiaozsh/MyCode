//****************************************Copyright (c)***********************************//
//技术支持：www.openedv.com
//淘宝店铺：http://openedv.taobao.com 
//关注微信公众平台微信号："正点原子"，免费获取FPGA & STM32资料。
//版权所有，盗版必究。
//Copyright(C) 正点原子 2018-2028
//All rights reserved
//----------------------------------------------------------------------------------------
// File name:           flow_led
// Last modified Date:  2018/7/11 11:12:36
// Last Version:        V1.1
// Descriptions:        流水灯
//----------------------------------------------------------------------------------------
// Created by:          正点原子
// Created date:        2018/1/29 10:55:56
// Version:             V1.0
// Descriptions:        The original version
//
//----------------------------------------------------------------------------------------
//****************************************************************************************//

module flow_led(
    input               sys_clk  ,  //系统时钟
    input               sys_rst_n,  //系统复位，低电平有效

    output  reg  [3:0]  led         //4个LED灯
    );

//reg define
reg [16:0] counter1;
reg [16:0] counter2;
reg trig;

wire             locked         ;  //locked信号拉高,锁相环开始稳定输出时钟

/*ipcore ipcore1 (
    .areset       (~sys_rst_n     ),  //锁相环高电平复位,所以复位信号取反
    .inclk0       (sys_clk        ),
    .c0           (clk0       ),
    .c1           (clk1  ),
    .locked       (locked         )
    ); */
mypll myplla(
    .areset       (~sys_rst_n     ),  //锁相环高电平复位,所以复位信号取反
    .inclk0       (sys_clk        ),
    .c0           (clk0       ),
    .c1           (clk1  ),
    .locked       (locked         )
    ); 



always @(posedge clk0 or negedge sys_rst_n) begin
    if (!sys_rst_n) begin
        counter1 <= 16'd0;
		  led[0] <= 1'b1;
		  end
    else if (counter1 < 16'd500)
			begin
        counter1 <= counter1 + 1'b1;
		  led[0] <= led[0];
		  end
    else
	 begin
        counter1 <= 16'd0;
		  led[0] <= !led[0];
		  end
end

always @(posedge clk1 or negedge sys_rst_n) begin
    if (!sys_rst_n) begin
        counter2 <= 16'd0;
		  led[1] <= 1'b1;
		  end
    else if (counter2 < 16'd500)
			begin
        counter2 <= counter2 + 1'b1;
		  led[1] <= led[1];
		  end
    else
	 begin
        counter2 <= 16'd0;
		  led[1] <= !led[1];
		  end
end
       /*                                                                                                                                                                                                               
//计数器对系统时钟计数，计时0.2秒
always @(posedge sys_clk or negedge sys_rst_n) begin
    if (!sys_rst_n) begin
        counter <= 24'd0;
		  trig <= 1'b0;
		  end
    else if (counter < 24'd5000000)
			begin
        counter <= counter + 1'b1;
		  trig <= trig;
		  end
    else
	 begin
        counter <= 24'd0;
		  trig <= !trig;
		  end
end

//通过移位寄存器控制IO口的高低电平，从而改变LED的显示状态
always @(posedge trig or negedge sys_rst_n) begin
	if (!sys_rst_n)
		led <= 4'b0;
	else
		led <= led + 1'b1;
end
*/
endmodule 

