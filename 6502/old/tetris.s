;
; File generated by cc65 v 2.13.2
;
	.fopt		compiler,"cc65 v 2.13.2"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
	.macpack	longbranch
	.forceimport	__STARTUP__
	.export		_data1
	.export		_data2
	.export		_data3
	.export		_dataUser
	.export		_datarnd
	.export		_img1
	.export		_img2
	.export		_waitvblank
	.export		_nmi
	.export		_getBase
	.export		_st2005
	.export		_DrawScore
	.export		_getBlock
	.export		_getNowBlock
	.export		_getNextBlock
	.export		_getNowBottom
	.export		_getNowLeft
	.export		_calcBoardAddress
	.export		_setBoard
	.export		_getBoard
	.export		_getRnd7
	.export		_DrawBuffToPPU
	.export		_getSPBase
	.export		_DrawNextShape
	.export		_DrawShape
	.export		_ClearLine
	.export		_Clear
	.export		_NextShape
	.export		_Touch
	.export		_getBoardBase
	.export		_DrawLine
	.export		_TouchDo
	.export		_AnyTouch
	.export		_rotate
	.export		_movelr
	.export		_down
	.export		_slowdown
	.export		_readJoystick
	.export		_Clear4by4
	.export		_loadplayer
	.export		_saveplayer
	.export		_mainSub
	.export		_Player1
	.export		_Player2
	.export		_init
	.export		_initTitle
	.export		_main

.segment	"RODATA"

_data1:
	.byte	$07
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$25
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$25
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$9B
	.byte	$00
	.byte	$A8
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$9B
	.byte	$00
	.byte	$A8
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$9B
	.byte	$00
	.byte	$A8
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$9B
	.byte	$00
	.byte	$A8
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$AB
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$95
	.byte	$00
	.byte	$80
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$AB
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$95
	.byte	$00
	.byte	$80
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$98
	.byte	$00
	.byte	$60
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B0
	.byte	$04
	.byte	$A5
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$98
	.byte	$00
	.byte	$60
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B0
	.byte	$04
	.byte	$A5
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$48
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$25
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$95
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$60
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2B
	.byte	$04
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$4B
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$28
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$A5
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$25
	.byte	$09
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$F5
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$C5
	.byte	$00
	.byte	$60
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$D5
	.byte	$04
	.byte	$60
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$4E
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$03
	.byte	$01
	.byte	$05
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$07
	.byte	$06
	.byte	$0B
	.byte	$03
	.byte	$0B
	.byte	$0E
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$03
	.byte	$04
	.byte	$01
	.byte	$06
	.byte	$07
	.byte	$06
	.byte	$09
	.byte	$0A
	.byte	$07
	.byte	$0C
	.byte	$09
	.byte	$03
	.byte	$0A
_data2:
	.byte	$11
	.byte	$11
	.byte	$04
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$04
	.byte	$00
	.byte	$22
	.byte	$00
	.byte	$22
	.byte	$00
	.byte	$22
	.byte	$00
	.byte	$22
	.byte	$00
	.byte	$22
	.byte	$01
	.byte	$32
	.byte	$00
	.byte	$22
	.byte	$01
	.byte	$32
	.byte	$00
	.byte	$21
	.byte	$02
	.byte	$23
	.byte	$00
	.byte	$21
	.byte	$02
	.byte	$23
	.byte	$00
	.byte	$11
	.byte	$02
	.byte	$33
	.byte	$00
	.byte	$22
	.byte	$02
	.byte	$13
	.byte	$00
	.byte	$12
	.byte	$01
	.byte	$31
	.byte	$00
	.byte	$22
	.byte	$02
	.byte	$33
	.byte	$00
	.byte	$32
	.byte	$00
	.byte	$22
	.byte	$02
	.byte	$23
	.byte	$00
	.byte	$21
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_data3:
	.byte	$04
	.byte	$01
	.byte	$04
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_dataUser:
	.byte	$02
	.byte	$02
	.byte	$10
	.byte	$10
	.byte	$02
	.byte	$0D
	.byte	$10
	.byte	$68
	.byte	$07
	.byte	$0D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$13
	.byte	$10
	.byte	$98
	.byte	$0B
	.byte	$0E
	.byte	$58
	.byte	$70
	.byte	$10
	.byte	$0E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_datarnd:
	.byte	$45
	.byte	$32
	.byte	$42
	.byte	$34
	.byte	$26
	.byte	$21
	.byte	$54
	.byte	$32
	.byte	$26
	.byte	$46
	.byte	$40
	.byte	$06
	.byte	$66
	.byte	$10
	.byte	$41
	.byte	$11
	.byte	$62
	.byte	$16
	.byte	$20
	.byte	$04
	.byte	$42
	.byte	$02
	.byte	$35
	.byte	$51
	.byte	$12
	.byte	$53
	.byte	$50
	.byte	$36
	.byte	$55
	.byte	$40
	.byte	$03
	.byte	$52
	.byte	$03
	.byte	$31
	.byte	$56
	.byte	$66
	.byte	$62
	.byte	$00
	.byte	$14
	.byte	$26
	.byte	$33
	.byte	$52
	.byte	$02
	.byte	$20
	.byte	$43
	.byte	$13
	.byte	$03
	.byte	$01
	.byte	$20
	.byte	$31
	.byte	$54
	.byte	$21
	.byte	$40
	.byte	$15
	.byte	$20
	.byte	$33
	.byte	$34
	.byte	$52
	.byte	$66
	.byte	$53
	.byte	$46
	.byte	$33
	.byte	$46
	.byte	$16
	.byte	$23
	.byte	$43
	.byte	$55
	.byte	$40
	.byte	$61
	.byte	$14
	.byte	$46
	.byte	$11
	.byte	$11
	.byte	$50
	.byte	$36
	.byte	$32
	.byte	$20
	.byte	$65
	.byte	$00
	.byte	$63
	.byte	$05
	.byte	$45
	.byte	$23
	.byte	$16
	.byte	$44
	.byte	$10
	.byte	$63
	.byte	$62
	.byte	$26
	.byte	$14
	.byte	$34
	.byte	$50
	.byte	$25
	.byte	$25
	.byte	$22
	.byte	$14
	.byte	$51
	.byte	$46
	.byte	$44
	.byte	$06
	.byte	$13
	.byte	$22
	.byte	$53
	.byte	$44
	.byte	$10
	.byte	$61
	.byte	$25
	.byte	$62
	.byte	$55
	.byte	$40
	.byte	$34
	.byte	$21
	.byte	$50
	.byte	$36
	.byte	$11
	.byte	$30
	.byte	$61
	.byte	$40
	.byte	$62
	.byte	$50
	.byte	$56
	.byte	$05
	.byte	$34
	.byte	$05
	.byte	$41
	.byte	$51
	.byte	$06
	.byte	$50
_img1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$FF
	.byte	$FF
	.byte	$C3
	.byte	$C3
	.byte	$C3
	.byte	$C3
	.byte	$FF
	.byte	$FF
	.byte	$01
	.byte	$03
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$7F
	.byte	$FF
	.byte	$C3
	.byte	$C3
	.byte	$C3
	.byte	$C3
	.byte	$C3
	.byte	$C3
	.byte	$C3
	.byte	$C3
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$FF
	.byte	$FF
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$FF
	.byte	$FF
	.byte	$00
	.byte	$00
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$C3
	.byte	$C3
	.byte	$C3
	.byte	$C3
	.byte	$C3
	.byte	$C3
	.byte	$FF
	.byte	$FF
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$7F
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$C3
	.byte	$C3
	.byte	$C3
	.byte	$C3
	.byte	$C3
	.byte	$C3
	.byte	$01
	.byte	$03
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$FF
	.byte	$FF
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$FF
	.byte	$FF
	.byte	$01
	.byte	$03
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$C0
	.byte	$C0
	.byte	$C0
	.byte	$C0
	.byte	$FF
	.byte	$FF
	.byte	$00
	.byte	$00
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$7F
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$C3
	.byte	$C3
	.byte	$01
	.byte	$03
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$BF
	.byte	$3F
	.byte	$C3
	.byte	$C3
	.byte	$C0
	.byte	$C0
	.byte	$C0
	.byte	$C0
	.byte	$FF
	.byte	$FF
	.byte	$3E
	.byte	$3C
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$7F
	.byte	$FF
	.byte	$C3
	.byte	$C3
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$FF
	.byte	$FF
	.byte	$3F
	.byte	$3F
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$C0
	.byte	$C0
	.byte	$C0
	.byte	$C0
	.byte	$C3
	.byte	$C3
	.byte	$00
	.byte	$00
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$C3
	.byte	$C3
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$FF
	.byte	$FF
	.byte	$3E
	.byte	$3C
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$C3
	.byte	$C3
	.byte	$C0
	.byte	$C0
	.byte	$C0
	.byte	$C0
	.byte	$C3
	.byte	$C3
	.byte	$3E
	.byte	$3C
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$FF
	.byte	$FF
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C3
	.byte	$C3
	.byte	$00
	.byte	$00
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$BF
	.byte	$3F
	.byte	$C3
	.byte	$C3
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$C3
	.byte	$C3
	.byte	$3F
	.byte	$3F
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$BF
	.byte	$3F
_img2:
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$36
	.byte	$56
	.byte	$56
	.byte	$36
	.byte	$76
	.byte	$76
	.byte	$76
	.byte	$79
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$CD
	.byte	$B5
	.byte	$BD
	.byte	$CC
	.byte	$F5
	.byte	$F5
	.byte	$B5
	.byte	$CD
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$BD
	.byte	$BD
	.byte	$BA
	.byte	$38
	.byte	$BA
	.byte	$BA
	.byte	$BA
	.byte	$BA
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$ED
	.byte	$EB
	.byte	$EB
	.byte	$E7
	.byte	$EB
	.byte	$EB
	.byte	$ED
	.byte	$ED
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$0E
	.byte	$75
	.byte	$75
	.byte	$1B
	.byte	$7B
	.byte	$7B
	.byte	$7B
	.byte	$1B
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$CF
	.byte	$B7
	.byte	$7B
	.byte	$7B
	.byte	$7B
	.byte	$7B
	.byte	$B7
	.byte	$CF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$EF
	.byte	$CF
	.byte	$EF
	.byte	$EF
	.byte	$EF
	.byte	$EF
	.byte	$EF
	.byte	$C7
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$C7
	.byte	$BB
	.byte	$FB
	.byte	$F7
	.byte	$EF
	.byte	$DF
	.byte	$BF
	.byte	$83
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$C7
	.byte	$FB
	.byte	$FB
	.byte	$C7
	.byte	$FB
	.byte	$FB
	.byte	$FB
	.byte	$C7
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$F7
	.byte	$E7
	.byte	$D7
	.byte	$B7
	.byte	$81
	.byte	$F7
	.byte	$F7
	.byte	$E3
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$83
	.byte	$BF
	.byte	$BF
	.byte	$87
	.byte	$FB
	.byte	$FB
	.byte	$BB
	.byte	$C7
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$C7
	.byte	$BB
	.byte	$BF
	.byte	$87
	.byte	$BB
	.byte	$BB
	.byte	$BB
	.byte	$C7
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$C3
	.byte	$DB
	.byte	$FB
	.byte	$F7
	.byte	$F7
	.byte	$F7
	.byte	$F7
	.byte	$F7
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$C7
	.byte	$BB
	.byte	$BB
	.byte	$C7
	.byte	$BB
	.byte	$BB
	.byte	$BB
	.byte	$C7
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$C7
	.byte	$BB
	.byte	$BB
	.byte	$C7
	.byte	$FB
	.byte	$FB
	.byte	$FB
	.byte	$C7

; ---------------------------------------------------------------
; void __near__ waitvblank (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_waitvblank: near

.segment	"CODE"

	ldy     #$00
	lda     ($14),y
	bmi     L040E
L040F:	lda     ($14),y
	bmi     L040F
L0413:	inc     $20
	lda     ($14),y
	bpl     L0413
	rts
L040E:	inc     $20
	lda     ($14),y
	bpl     L040E
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ nmi (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_nmi: near

.segment	"CODE"

	inc     $20
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ getBase (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getBase: near

.segment	"CODE"

	lda     $44
	clc
	adc     $32
	tax
	lda     _dataUser+$00,x
	clc
	adc     $2E
	lsr     a
	lsr     a
	lsr     a
	sta     $31
	lda     _dataUser+$00,x
	clc
	adc     $2E
	asl     a
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     _dataUser+$01,x
	clc
	adc     $2D
	clc
	adc     #$20
	sta     $30
	lda     #$20
	adc     $31
	sta     $2F
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ st2005 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_st2005: near

.segment	"CODE"

	lda     #$00
	tay
	sta     ($1A),y
	sta     ($1A),y
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ DrawScore (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DrawScore: near

.segment	"CODE"

	ldy     #$04
L0455:	ldx     $57,y
	inx
	cpx     #$0A
	stx     $57,y
	bne     L045D
	ldx     #$00
	stx     $57,y
	dey
	bne     L0455
L045D:	lda     #$08
	sta     $32
	lda     #$00
	sta     $2D
	sta     $2E
	jsr     _getBase
	jsr     _waitvblank
	ldy     #$00
	lda     $2F
	sta     ($1C),y
	lda     $30
	sta     ($1C),y
	clc
	ldx     #$16
	txa
	adc     $58
	sta     ($1E),y
	txa
	adc     $59
	sta     ($1E),y
	txa
	adc     $5A
	sta     ($1E),y
	txa
	adc     $5B
	sta     ($1E),y
	jsr     _st2005
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ getBlock (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getBlock: near

.segment	"CODE"

	lda     $25
	asl     a
	clc
	adc     $27
	sta     $27
	lda     $26
	lsr     a
	clc
	adc     $27
	tax
	lda     $26
	and     #$01
	beq     L04A2
	lda     _data1,x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     $28
	rts
L04A2:	lda     _data1,x
	and     #$0F
	sta     $28
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ getNowBlock (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getNowBlock: near

.segment	"CODE"

	lda     $53
	asl     a
	asl     a
	asl     a
	asl     a
	asl     a
	sta     $27
	lda     $54
	asl     a
	asl     a
	asl     a
	clc
	adc     $27
	sta     $27
	jsr     _getBlock
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ getNextBlock (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getNextBlock: near

.segment	"CODE"

	lda     $52
	asl     a
	asl     a
	asl     a
	asl     a
	asl     a
	sta     $27
	jsr     _getBlock
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ getNowBottom (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getNowBottom: near

.segment	"CODE"

	lda     $53
	asl     a
	asl     a
	asl     a
	sta     $27
	lda     $54
	asl     a
	clc
	adc     $27
	sta     $27
	lda     $26
	lsr     a
	clc
	adc     $27
	tax
	lda     $26
	and     #$01
	beq     L04EA
	lda     _data2,x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     $28
	rts
L04EA:	lda     _data2,x
	and     #$0F
	sta     $28
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ getNowLeft (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getNowLeft: near

.segment	"CODE"

	lda     $53
	asl     a
	asl     a
	clc
	adc     $54
	tax
	lda     _data3,x
	sta     $28
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ calcBoardAddress (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_calcBoardAddress: near

.segment	"CODE"

	lda     $2A
	asl     a
	asl     a
	clc
	adc     $2A
	sta     $2C
	lda     $29
	lsr     a
	clc
	adc     $2C
	clc
	adc     $49
	sta     $2C
	lda     $29
	and     #$01
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ setBoard (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setBoard: near

.segment	"CODE"

	jsr     _calcBoardAddress
	beq     L051E
	lda     $2B
	asl     a
	asl     a
	asl     a
	asl     a
	sta     $2B
	ldx     $2C
	lda     $0200,x
	and     #$0F
	ora     $2B
	sta     $0200,x
	rts
L051E:	ldx     $2C
	lda     $0200,x
	and     #$F0
	ora     $2B
	sta     $0200,x
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ getBoard (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getBoard: near

.segment	"CODE"

	jsr     _calcBoardAddress
	beq     L053D
	ldx     $2C
	lda     $0200,x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     $2B
	rts
L053D:	ldx     $2C
	lda     $0200,x
	and     #$0F
	sta     $2B
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ getRnd7 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getRnd7: near

.segment	"CODE"

	lda     $20
	and     #$7F
	tax
	lda     $20
	and     #$80
	beq     L0559
	lda     _datarnd,x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	rts
L0559:	lda     _datarnd,x
	and     #$0F
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ DrawBuffToPPU (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DrawBuffToPPU: near

.segment	"CODE"

	clc
	adc     $48
	sta     $2003
	ldx     #$00
L0568:	lda     $02E8,x
	sta     $2004
	inx
	cpx     #$10
	bne     L0568
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ getSPBase (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getSPBase: near

.segment	"CODE"

	lda     $44
	clc
	adc     $33
	tax
	lda     $35
	clc
	adc     #$01
	asl     a
	asl     a
	asl     a
	clc
	adc     _dataUser+$00,x
	sec
	sbc     #$01
	sta     $02E8,y
	iny
	lda     $28
	sta     $02E8,y
	iny
	lda     #$00
	sta     $02E8,y
	iny
	lda     $34
	asl     a
	asl     a
	asl     a
	clc
	adc     _dataUser+$01,x
	sta     $02E8,y
	iny
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ DrawNextShape (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DrawNextShape: near

.segment	"CODE"

	ldy     #$00
	lda     #$04
	sta     $38
L059E:	lda     #$04
	sta     $39
L05A2:	ldx     $38
	dex
	stx     $25
	stx     $34
	ldx     $39
	dex
	stx     $26
	stx     $35
	jsr     _getNextBlock
	beq     L05B3
	lda     #$06
	sta     $33
	jsr     _getSPBase
L05B3:	dec     $39
	bne     L05A2
	dec     $38
	bne     L059E
	jsr     _waitvblank
	lda     #$10
	jsr     _DrawBuffToPPU
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ DrawShape (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DrawShape: near

.segment	"CODE"

	ldy     #$00
	lda     #$04
	sta     $38
L05C7:	lda     #$04
	sta     $39
L05CB:	ldx     $38
	dex
	stx     $25
	txa
	clc
	adc     $50
	sta     $34
	ldx     $39
	dex
	stx     $26
	txa
	clc
	adc     #$13
	sec
	sbc     $51
	sta     $35
	jsr     _getNowBlock
	beq     L05E6
	lda     #$02
	sta     $33
	jsr     _getSPBase
L05E6:	dec     $39
	bne     L05CB
	dec     $38
	bne     L05C7
	jsr     _waitvblank
	lda     #$00
	jsr     _DrawBuffToPPU
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ ClearLine (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ClearLine: near

.segment	"CODE"

	lda     #$00
	ldx     #$0A
L05F8:	sta     $2007
	dex
	bne     L05F8
	jsr     _st2005
	jsr     _waitvblank
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Clear (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Clear: near

.segment	"CODE"

	ldx     #$63
L0600:	txa
	clc
	adc     $49
	tay
	lda     #$00
	sta     $0200,y
	dex
	bne     L0600
	lda     #$00
	ldx     $49
	sta     $0200,x
	jsr     _waitvblank
	lda     #$00
	sta     $32
	lda     #$00
	sta     $2D
	sta     $2E
	jsr     _getBase
	lda     #$14
	sta     $3A
L061E:	lda     $2F
	sta     $2006
	lda     $30
	sta     $2006
	clc
	adc     #$20
	sta     $30
	lda     $2F
	adc     #$00
	sta     $2F
	jsr     _ClearLine
	dec     $3A
	bne     L061E
	ldx     #$09
	stx     $58
	stx     $59
	stx     $5A
	stx     $5B
	jsr     _DrawScore
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ NextShape (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_NextShape: near

.segment	"CODE"

	lda     $52
	sta     $53
	lda     #$00
	sta     $54
	lda     #$13
	sta     $51
	lda     #$03
	sta     $50
	jsr     _getRnd7
	sta     $52
	jsr     _DrawNextShape
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Touch (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Touch: near

.segment	"CODE"

	lda     #$04
	sta     $24
L0652:	ldx     $24
	dex
	stx     $26
	jsr     _getNowBottom
	beq     L065A
	tax
	dex
	cpx     $51
	beq     L0660
	lda     $50
	clc
	adc     $24
	tax
	dex
	stx     $29
	lda     $51
	sec
	sbc     $28
	sta     $2A
	jsr     _getBoard
	bne     L0660
L065A:	dec     $24
	bne     L0652
	lda     #$00
	rts
L0660:	lda     #$01
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ getBoardBase (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_getBoardBase: near

.segment	"CODE"

	lda     #$00
	sta     $32
	lda     #$13
	sec
	sbc     $2E
	sta     $2E
	jsr     _getBase
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ DrawLine (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_DrawLine: near

.segment	"CODE"

	lda     #$00
	sta     $2D
	lda     $37
	sta     $2E
	jsr     _getBoardBase
	ldx     #$00
	lda     $2F
	sta     $02E8,x
	inx
	lda     $30
	sta     $02E8,x
	lda     #$00
	sta     $29
	lda     #$0A
	sta     $36
L069E:	lda     $37
	sta     $2A
	jsr     _getBoard
	ldx     $29
	inx
	inx
	sta     $02E8,x
	inc     $29
	dec     $36
	bne     L069E
	jsr     _waitvblank
	ldx     #$00
	lda     $02E8,x
	sta     $2006
	inx
	lda     $02E8,x
	sta     $2006
	inx
	ldy     #$0A
L06BA:	lda     $02E8,x
	sta     $2007
	inx
	dey
	bne     L06BA
	jsr     _st2005
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ TouchDo (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_TouchDo: near

.segment	"CODE"

	ldy     #$00
	lda     #$04
	sta     $3B
L06C7:	lda     #$04
	sta     $3C
L06CB:	ldx     $3B
	dex
	stx     $25
	txa
	clc
	adc     $50
	sta     $29
	sta     $2D
	ldx     $3C
	dex
	stx     $26
	lda     $51
	sec
	sbc     $26
	sta     $2A
	sta     $2E
	jsr     _getNowBlock
	beq     L06E9
	lda     $28
	sta     $2B
	jsr     _setBoard
	jsr     _getBoardBase
	sta     $02E8,y
	iny
	lda     $30
	sta     $02E8,y
	iny
	lda     $28
	sta     $02E8,y
	iny
L06E9:	dec     $3C
	bne     L06CB
	dec     $3B
	bne     L06C7
	ldy     #$00
	jsr     _waitvblank
	ldx     #$04
L0706:	lda     $02E8,y
	sta     $2006
	iny
	lda     $02E8,y
	sta     $2006
	iny
	lda     $02E8,y
	sta     $2007
	iny
	dex
	bne     L0706
	jsr     _st2005
	lda     #$14
	sta     $3C
L0719:	lda     #$0A
	sta     $3B
L071D:	ldx     $3B
	dex
	stx     $29
	ldx     $3C
	dex
	stx     $2A
	jsr     _getBoard
	bne     L072A
	lda     #$00
	jmp     L072D
L072A:	dec     $3B
	bne     L071D
	lda     #$01
L072D:	beq     L0733
	jsr     _DrawScore
	lda     #$0A
	sta     $3D
L0738:	ldx     $3D
	dex
	stx     $29
	lda     $3C
	sec
	sbc     #$02
	bmi     L0743
	sta     $2A
	jsr     _getBoard
	clc
	adc     #$E0
	tax
	lda     _data1,x
	sta     $2B
	jsr     _setBoard
L0743:	ldx     $3C
	stx     $2A
	jsr     _getBoard
	clc
	adc     #$F0
	tax
	lda     _data1,x
	sta     $2B
	jsr     _setBoard
	dec     $3D
	bne     L0738
	lda     $3C
	sec
	sbc     #$02
	bmi     L0762
	sta     $37
	jsr     _DrawLine
L0762:	ldx     $3C
	dex
	stx     $3D
L076B:	lda     #$0A
	sta     $3B
L076F:	ldx     $3B
	dex
	stx     $29
	ldx     $3D
	inx
	stx     $2A
	jsr     _getBoard
	ldx     $3D
	stx     $2A
	jsr     _setBoard
	dec     $3B
	bne     L076F
	ldx     $3D
	stx     $37
	jsr     _DrawLine
	inc     $3D
	lda     $3D
	cmp     #$13
	bne     L076B
L0733:	dec     $3C
	beq     L0791
	jmp     L0719
L0791:	lda     #$0A
	sta     $3B
L0796:	ldx     $3B
	dex
	stx     $29
	ldx     #$12
	stx     $2A
	jsr     _getBoard
	beq     L07A1
	jsr     _Clear
	jmp     L07A4
L07A1:	dec     $3B
	bne     L0796
L07A4:	jsr     _NextShape
	jsr     _DrawShape
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ AnyTouch (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_AnyTouch: near

.segment	"CODE"

	lda     $50
	bpl     L07AE
	beq     L07AE
	lda     #$01
	rts
L07AE:	jsr     _getNowLeft
	clc
	adc     $50
	cmp     #$0B
	bmi     L07B8
	lda     #$01
	rts
L07B8:	lda     #$04
	sta     $22
L07BE:	lda     #$04
	sta     $23
L07C2:	ldx     $23
	dex
	stx     $26
	jsr     _getNowBottom
	tax
	dex
	dex
	cpx     $51
	bmi     L07CF
	lda     #$01
	rts
L07CF:	ldx     $22
	dex
	stx     $25
	txa
	clc
	adc     $50
	sta     $29
	ldx     $23
	dex
	stx     $26
	ldx     $51
	txa
	sec
	sbc     $26
	sta     $2A
	jsr     _getNowBlock
	jsr     _getBoard
	beq     L07ED
	lda     $28
	beq     L07ED
	lda     #$01
	rts
L07ED:	dec     $23
	bne     L07C2
	dec     $22
	bne     L07BE
	lda     #$00
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ rotate (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_rotate: near

.segment	"CODE"

	lda     $54
	clc
	adc     $40
	and     #$03
	sta     $54
	jsr     _getNowLeft
	clc
	adc     $50
	cmp     #$0B
	bmi     L0809
	lda     $50
	sta     $41
	lda     #$0A
	sec
	sbc     $28
	sta     $50
	jsr     _AnyTouch
	beq     L0816
	lda     $41
	sta     $50
	jmp     L081C
L0809:	jsr     _AnyTouch
	beq     L0816
L081C:	lda     $54
	sec
	sbc     $40
	and     #$03
	sta     $54
L0816:	jsr     _DrawShape
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ movelr (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movelr: near

.segment	"CODE"

	lda     $50
	clc
	adc     $3E
	sta     $50
	jsr     _AnyTouch
	beq     L0832
	lda     $50
	sec
	sbc     $3E
	sta     $50
L0832:	jsr     _DrawShape
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ down (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_down: near

.segment	"CODE"

	jsr     _Touch
L083D:	bne     L083F
	dec     $51
	jsr     _Touch
	jmp     L083D
L083F:	jsr     _TouchDo
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ slowdown (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_slowdown: near

.segment	"CODE"

	jsr     _Touch
	beq     L0848
	jsr     _TouchDo
	rts
L0848:	dec     $51
	jsr     _DrawShape
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ readJoystick (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_readJoystick: near

.segment	"CODE"

	ldx     $47
	lda     #$01
	sta     $4016,x
	lda     #$00
	sta     $4016,x
	sta     $56
	ldy     #$08
L0858:	lda     $4016,x
	and     #$01
	asl     $56
	ora     $56
	sta     $56
	dey
	bne     L0858
	lda     $56
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Clear4by4 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Clear4by4: near

.segment	"CODE"

	lda     #$04
	sta     $32
	lda     #$00
	tay
	sta     $2D
	sta     $2E
	jsr     _getBase
	jsr     _waitvblank
	ldx     #$04
	stx     $42
L0875:	ldx     #$00
	lda     $2F
	sta     ($1C),y
	lda     $30
	sta     ($1C),y
	lda     #$00
	sta     ($1E),y
	sta     ($1E),y
	sta     ($1E),y
	sta     ($1E),y
	lda     $30
	clc
	adc     #$20
	sta     $30
	lda     $2F
	adc     #$00
	sta     $2F
	dec     $42
	bne     L0875
	jsr     _st2005
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ loadplayer (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_loadplayer: near

.segment	"CODE"

	ldy     $44
	ldx     #$0F
L089B:	lda     $02C8,y
	sta     $50,x
	dey
	dex
	bne     L089B
	lda     $02C8,y
	sta     $50,x
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ saveplayer (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_saveplayer: near

.segment	"CODE"

	ldy     $44
	ldx     #$0F
L08AB:	lda     $50,x
	sta     $02C8,y
	dey
	dex
	bne     L08AB
	lda     $50,x
	sta     $02C8,y
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ mainSub (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_mainSub: near

.segment	"CODE"

	jsr     _loadplayer
	dec     $5C
	bne     L08BC
	lda     #$32
	sta     $5C
L08BC:	jsr     _readJoystick
	eor     $55
	and     $56
	beq     L08F1
	sta     $57
	and     #$01
	beq     L08CB
	sta     $3E
	jsr     _movelr
L08CB:	lda     $57
	and     #$02
	beq     L08D3
	lda     #$FF
	sta     $3E
	jsr     _movelr
L08D3:	lda     $57
	and     #$04
	beq     L08DC
	jsr     _down
L08DC:	lda     $57
	and     #$08
	beq     L08E2
	jsr     _slowdown
L08E2:	lda     $57
	and     #$40
	beq     L08E8
	lda     #$FF
	sta     $40
	jsr     _rotate
L08E8:	lda     $57
	and     #$80
	beq     L08F1
	lda     #$01
	sta     $40
	jsr     _rotate
L08F1:	lda     $56
	sta     $55
	jsr     _saveplayer
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Player1 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Player1: near

.segment	"CODE"

	lda     #$00
	sta     $44
	sta     $47
	sta     $48
	sta     $49
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Player2 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Player2: near

.segment	"CODE"

	lda     #$10
	sta     $44
	lda     #$01
	sta     $47
	lda     #$20
	sta     $48
	lda     #$64
	sta     $49
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init: near

.segment	"CODE"

	jsr     _Clear
	jsr     _Clear4by4
	jsr     _NextShape
	jsr     _NextShape
	lda     #$32
	sta     $5C
	jsr     _saveplayer
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ initTitle (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_initTitle: near

.segment	"CODE"

	ldx     #$11
	stx     $2007
	inx
	stx     $2007
	inx
	stx     $2007
	inx
	stx     $2007
	inx
	stx     $2007
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	lda     #$20
	ldy     #$00
	ldx     #$00
L092A:	sty     $10,x
	iny
	inx
	sta     $10,x
	inx
	cpx     #$10
	bne     L092A
	lda     #$00
	tay
	sta     ($1C),y
	sta     ($1C),y
	ldx     #$00
L0939:	lda     _img1,x
	sta     ($1E),y
	inx
	cpx     #$FF
	bne     L0939
	lda     _img1,x
	sta     ($1E),y
	ldx     #$00
L0944:	lda     _img2,x
	sta     ($1E),y
	inx
	cpx     #$FF
	bne     L0944
	lda     _img2,x
	sta     ($1E),y
	lda     #$20
	sta     ($1C),y
	sta     ($1C),y
	lda     #$80
	sta     $42
	lda     #$03
	sta     $43
	ldx     #$10
L095A:	stx     $2007
	lda     $42
	bne     L095F
	dec     $43
L095F:	dec     $42
	lda     $42
	bne     L095A
	lda     $43
	bne     L095A
	lda     #$3F
	sta     ($1C),y
	lda     #$00
	sta     ($1C),y
	lda     #$2C
	sta     ($1E),y
	lda     #$30
	sta     ($1E),y
	lda     #$00
	sta     ($1E),y
	lda     #$3F
	sta     ($1E),y
	lda     #$3F
	sta     ($1C),y
	lda     #$11
	sta     ($1C),y
	lda     #$30
	sta     ($1E),y
	lda     #$22
	sta     ($1E),y
	lda     #$3F
	sta     ($1E),y
	lda     #$20
	sta     ($1C),y
	lda     #$C5
	sta     ($1C),y
	jsr     _initTitle
	lda     #$20
	sta     ($1C),y
	lda     #$D5
	sta     ($1C),y
	jsr     _initTitle
	lda     #$80
	sta     ($10),y
	lda     #$18
	sta     ($12),y
	jsr     _st2005
L09A0:	lda     $45
	bne     L09A4
	jsr     _Player1
	jsr     _readJoystick
	beq     L09A4
	lda     #$01
	sta     $45
	jsr     _init
L09A4:	lda     $46
	bne     L09AF
	jsr     _Player2
	jsr     _readJoystick
	beq     L09AF
	lda     #$01
	sta     $46
	jsr     _init
L09AF:	jsr     _waitvblank
	lda     $45
	beq     L09BB
	jsr     _Player1
	jsr     _mainSub
L09BB:	lda     $46
	beq     L09C1
	jsr     _Player2
	jsr     _mainSub
L09C1:	jmp     L09A0
	rts

.endproc

