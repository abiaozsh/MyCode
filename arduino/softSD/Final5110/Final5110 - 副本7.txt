#include <Arduino.h>
#include <avr/pgmspace.h>
#include <stdint.h>
#include <avr/io.h>
#include "struct.h"

uint8_t errCode = 0;

inline void _dly()
{
  for(uint8_t i=0;i<15;i++)//5 is good
  {
    volatile uint8_t t;
    t=0;
  }
}

//D4
void SPI_MOSI_INIT(){PORTD &= ~_BV(4);_dly();}
void SPI_MOSI_HIGH(){DDRD &= ~_BV(4);_dly();}
void SPI_MOSI_LOW(){DDRD |= _BV(4);_dly();}

//D2
void SPI_MISO_INIT(){PORTD &= ~_BV(2);DDRD &= ~_BV(2);_dly();}
uint8_t SPI_MISO_GET(){return (~PIND) & _BV(2);}

//D3
void SPI_SCK_INIT(){PORTD &= ~_BV(3);_dly();}
void SPI_SCK_HIGH(){DDRD &= ~_BV(3);_dly();}
void SPI_SCK_LOW(){DDRD |= _BV(3);_dly();}

//D5
void SPI_CHIP_SELECT_INIT(){PORTD &= ~_BV(5);_dly();}
void SPI_CHIP_SELECT_HIGH(){DDRD &= ~_BV(5);_dly();}
void SPI_CHIP_SELECT_LOW(){DDRD |= _BV(5);_dly();}


//------------------------------------------------------------------------------
uint8_t spiRec(void) {
  uint8_t data = 0;
  // no interrupts during byte receive - about 8 us
  cli();
  // output pin high - like sending 0XFF
  SPI_MOSI_HIGH();
  
  for (uint8_t i = 0; i < 8; i++) {
    SPI_SCK_HIGH();

    data <<= 1;

    if (SPI_MISO_GET()) data |= 1;

    SPI_SCK_LOW();
  }
  // enable interrupts
  sei();
  return data;
}
//------------------------------------------------------------------------------
void spiSend(uint8_t data) {
  // no interrupts during byte send - about 8 us
  cli();
  for (uint8_t i = 0; i < 8; i++) {
    SPI_SCK_LOW();
    if(data & 0X80)
    {
      SPI_MOSI_HIGH();
    }
    else
    {
      SPI_MOSI_LOW();
    }
    data <<= 1;
    SPI_SCK_HIGH();
  }
  SPI_SCK_LOW();
  // enable interrupts
  sei();
}



uint32_t Sd2Card_block_;
uint8_t  Sd2Card_inBlock_ = 0;
uint16_t Sd2Card_offset_;
uint8_t  Sd2Card_status_;
uint8_t  Sd2Card_type_;

void Sd2Card_readEnd(void) {
  if (Sd2Card_inBlock_) {
      // skip data and crc
    while (Sd2Card_offset_++ < 514) spiRec();
    SPI_CHIP_SELECT_HIGH();
    Sd2Card_inBlock_ = 0;
  }
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card_waitNotBusy(uint16_t timeoutMillis) {
  uint16_t t0 = millis();
  do {
    if (spiRec() == 0XFF) return true;
  }
  while (((uint16_t)millis() - t0) < timeoutMillis);
  return false;
}

//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card_cardCommand(uint8_t cmd, uint32_t arg) {
  // end read if in partialBlockRead mode
  Sd2Card_readEnd();
  // select card
  SPI_CHIP_SELECT_LOW();
  // wait up to 300 ms if busy
  Sd2Card_waitNotBusy(300);
  // send command
  spiSend(cmd | 0x40);
  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
  spiSend(crc);
  // wait for response
  for (uint8_t i = 0; ((Sd2Card_status_ = spiRec()) & 0X80) && i != 0XFF; i++);
  return Sd2Card_status_;
}

uint8_t Sd2Card_cardAcmd(uint8_t cmd, uint32_t arg) {
  Sd2Card_cardCommand(CMD55, 0);
  return Sd2Card_cardCommand(cmd, arg);
}

uint8_t Sd2Card_cardinit() {
  Sd2Card_inBlock_ = Sd2Card_type_ = 0;
  // 16-bit init start time allows over a minute
  uint16_t t0 = (uint16_t)millis();
  uint32_t arg;

  // set pin modes
  SPI_CHIP_SELECT_INIT();
  SPI_CHIP_SELECT_HIGH();
  SPI_MISO_INIT();
  SPI_MOSI_INIT();
  SPI_SCK_INIT();


  // must supply min of 74 clock cycles with CS high.
  for (uint8_t i = 0; i < 10; i++) spiSend(0XFF);

  SPI_CHIP_SELECT_LOW();

  // command to go idle in SPI mode
  while ((Sd2Card_status_ = Sd2Card_cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
    if (((uint16_t)millis() - t0) > SD_INIT_TIMEOUT) {
      errCode = 1;
      goto fail;
    }
  }
  // check SD version
  if ((Sd2Card_cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    Sd2Card_type_ = SD_CARD_TYPE_SD1;
  } else {
    // only need last byte of r7 response
    for (uint8_t i = 0; i < 4; i++) Sd2Card_status_ = spiRec();
    if (Sd2Card_status_ != 0XAA) {
      errCode = 2;
      goto fail;
    }
    Sd2Card_type_ = SD_CARD_TYPE_SD2;
  }
  // initialize card and send host supports SDHC if SD2
  arg = Sd2Card_type_ == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;

  while ((Sd2Card_status_ = Sd2Card_cardAcmd(ACMD41, arg)) != R1_READY_STATE) {
    // check for timeout
    if (((uint16_t)millis() - t0) > SD_INIT_TIMEOUT) {
      errCode = 3;
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (Sd2Card_type_ == SD_CARD_TYPE_SD2) {
    if (Sd2Card_cardCommand(CMD58, 0)) {
      errCode = 5;
      goto fail;
    }
    if ((spiRec() & 0XC0) == 0XC0) Sd2Card_type_ = SD_CARD_TYPE_SDHC;
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
  }
  SPI_CHIP_SELECT_HIGH();

  return true;

 fail:
  SPI_CHIP_SELECT_HIGH();
  return false;
}

//------------------------------------------------------------------------------
uint8_t Sd2Card_waitStartBlock(void) {
  uint16_t t0 = millis();
  while ((Sd2Card_status_ = spiRec()) == 0XFF) {
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
      errCode = 8;
      goto fail;
    }
  }
  if (Sd2Card_status_ != DATA_START_BLOCK) {
    errCode = 9;
    goto fail;
  }
  return true;

 fail:
  SPI_CHIP_SELECT_HIGH();
  return false;
}

uint8_t Sd2Card_readData(uint32_t block, uint16_t offset, uint16_t count, uint8_t* dst) {
  if (count == 0) return true;
  if ((count + offset) > 512) {
    goto fail;
  }
  if (!Sd2Card_inBlock_ || block != Sd2Card_block_ || offset < Sd2Card_offset_) {
    Sd2Card_block_ = block;
    // use address if not SDHC card
    if (Sd2Card_type_ != SD_CARD_TYPE_SDHC) block <<= 9;
    if (Sd2Card_cardCommand(CMD17, block)) {
      errCode = 6;
      goto fail;
    }
    if (!Sd2Card_waitStartBlock()) {
      goto fail;
    }
    Sd2Card_offset_ = 0;
    Sd2Card_inBlock_ = 1;
  }


  // skip data before offset
  for (;Sd2Card_offset_ < offset; Sd2Card_offset_++) {
    spiRec();
  }
  // transfer data
  for (uint16_t i = 0; i < count; i++) {
    dst[i] = spiRec();
  }

  Sd2Card_offset_ += count;
  Sd2Card_readEnd();
  return true;

 fail:
  SPI_CHIP_SELECT_HIGH();
  return false;
}


uint8_t Sd2Card_readBlock(uint32_t block, uint8_t* dst) {
  return Sd2Card_readData(block, 0, 512, dst);
}

//------------------------------------------------------------------------------
uint8_t Sd2Card_writeData(const uint8_t* src) {
  // wait for previous write to finish
  if (!Sd2Card_waitNotBusy(SD_WRITE_TIMEOUT)) {
    errCode = 13;
    SPI_CHIP_SELECT_HIGH();
    return false;
  }
  return Sd2Card_writeData(WRITE_MULTIPLE_TOKEN, src);
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card_writeData(uint8_t token, const uint8_t* src) {
  spiSend(token);
  for (uint16_t i = 0; i < 512; i++) {
    spiSend(src[i]);
  }
  spiSend(0xff);  // dummy crc
  spiSend(0xff);  // dummy crc

  Sd2Card_status_ = spiRec();
  if ((Sd2Card_status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    errCode = 14;
    SPI_CHIP_SELECT_HIGH();
    return false;
  }
  return true;
}

//------------------------------------------------------------------------------
uint8_t Sd2Card_writeBlock(uint32_t blockNumber, const uint8_t* src) {

  // use address if not SDHC card
  if (Sd2Card_type_ != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  if (Sd2Card_cardCommand(CMD24, blockNumber)) {
    errCode = 10;
    goto fail;
  }
  if (!Sd2Card_writeData(DATA_START_BLOCK, src)) goto fail;

  // wait for flash programming to complete
  if (!Sd2Card_waitNotBusy(SD_WRITE_TIMEOUT)) {
    errCode = 11;
    goto fail;
  }
  // response is r2 so get and check two bytes for nonzero
  if (Sd2Card_cardCommand(CMD13, 0) || spiRec()) {
    errCode = 12;
    goto fail;
  }
  SPI_CHIP_SELECT_HIGH();
  return true;

 fail:
  SPI_CHIP_SELECT_HIGH();
  return false;
}

cache_t  SdVolume_cacheBuffer_;        // 512 byte cache for device blocks
uint32_t SdVolume_cacheBlockNumber_ = 0XFFFFFFFF;  // Logical number of block in the cache
uint8_t  SdVolume_cacheDirty_ = 0;         // cacheFlush() will write block if true
uint32_t SdVolume_cacheMirrorBlock_ = 0;  // block number for mirror FAT
//
uint32_t SdVolume_allocSearchStart_ = 2;   // start cluster for alloc search
uint8_t  SdVolume_blocksPerCluster_;    // cluster size in blocks
uint32_t SdVolume_blocksPerFat_;       // FAT size in blocks
uint32_t SdVolume_clusterCount_;       // clusters in one FAT
uint8_t  SdVolume_clusterSizeShift_;    // shift to convert cluster count to block count
uint32_t SdVolume_dataStartBlock_;     // first data block number
uint8_t  SdVolume_fatCount_;            // number of FATs on volume
uint32_t SdVolume_fatStartBlock_;      // start block for first FAT
uint8_t  SdVolume_fatType_ = 0;             // volume type (12, 16, OR 32)
uint16_t SdVolume_rootDirEntryCount_;  // number of entries in FAT16 root dir
uint32_t SdVolume_rootDirStart_;       // root start block for FAT16, cluster for FAT32

//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume_cacheZeroBlock(uint32_t blockNumber) {
  if (!SdVolume_cacheFlush()) return false;

  // loop take less flash than memset(SdVolume_cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    SdVolume_cacheBuffer_.data[i] = 0;
  }
  SdVolume_cacheBlockNumber_ = blockNumber;
  SdVolume_cacheSetDirty();
  return true;
}


//------------------------------------------------------------------------------
uint8_t SdVolume_cacheFlush(void) {
  if (SdVolume_cacheDirty_) {
    if (!Sd2Card_writeBlock(SdVolume_cacheBlockNumber_, SdVolume_cacheBuffer_.data)) {
      return false;
    }
    // mirror FAT tables
    if (SdVolume_cacheMirrorBlock_) {
      if (!Sd2Card_writeBlock(SdVolume_cacheMirrorBlock_, SdVolume_cacheBuffer_.data)) {
        return false;
      }
      SdVolume_cacheMirrorBlock_ = 0;
    }
    SdVolume_cacheDirty_ = 0;
  }
  return true;
}

//------------------------------------------------------------------------------
uint8_t SdVolume_cacheRawBlock(uint32_t blockNumber, uint8_t action) {
  if (SdVolume_cacheBlockNumber_ != blockNumber) {
    if (!SdVolume_cacheFlush()) return false;
    if (!Sd2Card_readBlock(blockNumber, SdVolume_cacheBuffer_.data)) return false;
    SdVolume_cacheBlockNumber_ = blockNumber;
  }
  SdVolume_cacheDirty_ |= action;
  return true;
}

uint8_t SdVolume_volumeinit(uint8_t part) {
  uint32_t volumeStartBlock = 0;
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (!SdVolume_cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &SdVolume_cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
      p->totalSectors < 100 ||
      p->firstSector == 0) {
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!SdVolume_cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &SdVolume_cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    bpb->fatCount == 0 ||
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
  }
  SdVolume_fatCount_ = bpb->fatCount;
  SdVolume_blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by SdVolume_blocksPerCluster_
  SdVolume_clusterSizeShift_ = 0;
  while (SdVolume_blocksPerCluster_ != (1 << SdVolume_clusterSizeShift_)) {
    // error if not power of 2
    if (SdVolume_clusterSizeShift_++ > 7) return false;
  }
  SdVolume_blocksPerFat_ = bpb->sectorsPerFat16 ? bpb->sectorsPerFat16 : bpb->sectorsPerFat32;

  SdVolume_fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;

  // count for FAT16 zero for FAT32
  SdVolume_rootDirEntryCount_ = bpb->rootDirEntryCount;

  // directory start for FAT16 dataStart for FAT32
  SdVolume_rootDirStart_ = SdVolume_fatStartBlock_ + bpb->fatCount * SdVolume_blocksPerFat_;

  // data start for FAT16 and FAT32
  SdVolume_dataStartBlock_ = SdVolume_rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ? bpb->totalSectors16 : bpb->totalSectors32;
  // total data blocks
  SdVolume_clusterCount_ = totalBlocks - (SdVolume_dataStartBlock_ - volumeStartBlock);

  // divide by cluster size to get cluster count
  SdVolume_clusterCount_ >>= SdVolume_clusterSizeShift_;

  // FAT type is determined by cluster count
  if (SdVolume_clusterCount_ < 4085) {
    SdVolume_fatType_ = 12;
  } else if (SdVolume_clusterCount_ < 65525) {
    SdVolume_fatType_ = 16;
  } else {
    SdVolume_rootDirStart_ = bpb->fat32RootCluster;
    SdVolume_fatType_ = 32;
  }
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume_fatGet(uint32_t cluster, uint32_t* value) {
  if (cluster > (SdVolume_clusterCount_ + 1)) return false;
  uint32_t lba = SdVolume_fatStartBlock_;
  lba += SdVolume_fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != SdVolume_cacheBlockNumber_) {
    if (!SdVolume_cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (SdVolume_fatType_ == 16) {
    *value = SdVolume_cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = SdVolume_cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}

void SdVolume_cacheSetDirty(void) {
  SdVolume_cacheDirty_ |= CACHE_FOR_WRITE;
}

//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume_fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;

  // error if not in FAT
  if (cluster > (SdVolume_clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = SdVolume_fatStartBlock_;
  lba += SdVolume_fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != SdVolume_cacheBlockNumber_) {
    if (!SdVolume_cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (SdVolume_fatType_ == 16) {
    SdVolume_cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    SdVolume_cacheBuffer_.fat32[cluster & 0X7F] = value;
  }
  SdVolume_cacheSetDirty();

  // mirror second FAT
  if (SdVolume_fatCount_ > 1) SdVolume_cacheMirrorBlock_ = lba + SdVolume_blocksPerFat_;
  return true;
}

uint8_t SdVolume_fatPutEOC(uint32_t cluster) {
  return SdVolume_fatPut(cluster, 0x0FFFFFFF);
}

// find a contiguous group of clusters
uint8_t SdVolume_allocContiguous(uint32_t* curCluster) {
  // start of group
  uint32_t bgnCluster;

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    // try to make file contiguous
    bgnCluster = *curCluster + 1;

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = SdVolume_allocSearchStart_;

    // save next search start if one cluster
    setStart = true;
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = SdVolume_clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= SdVolume_clusterCount_) return false;

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!SdVolume_fatGet(endCluster, &f)) return false;

    if (f != 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if (endCluster == bgnCluster) {
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!SdVolume_fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    if (!SdVolume_fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!SdVolume_fatPut(*curCluster, bgnCluster)) return false;
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;

  // remember possible next free cluster
  if (setStart) SdVolume_allocSearchStart_ = bgnCluster + 1;

  return true;
}

uint8_t  SdVolume_isEOC(uint32_t cluster)  {return  cluster >= (SdVolume_fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);}

//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume_chainSize(uint32_t cluster, uint32_t* size) {
  uint32_t s = 0;
  do {
    if (!SdVolume_fatGet(cluster, &cluster)) return false;
    s += 512UL << SdVolume_clusterSizeShift_;
  } while (!SdVolume_isEOC(cluster));
  *size = s;
  return true;
}


uint8_t  SdVolume_blockOfCluster(uint32_t position)  {return (position >> 9) & (SdVolume_blocksPerCluster_ - 1);}
uint32_t SdVolume_clusterStartBlock(uint32_t cluster)  {return SdVolume_dataStartBlock_ + ((cluster - 2) << SdVolume_clusterSizeShift_);}





uint8_t   Root_flags_;
uint8_t   Root_type_;
uint32_t  Root_firstCluster_;
uint32_t  Root_fileSize_;
uint32_t  Root_curCluster_;
uint32_t  Root_curPosition_;
uint32_t  Root_dirBlock_;
uint8_t   Root_dirIndex_;

uint8_t Root_openRoot() {
  // error if file is already open
  //if (isOpen()) return false;

  if (SdVolume_fatType_ == 16) {
    Root_type_ = FAT_FILE_TYPE_ROOT16;
    Root_firstCluster_ = 0;
    Root_fileSize_ = 32 * SdVolume_rootDirEntryCount_;
  } else if (SdVolume_fatType_ == 32) {
    Root_type_ = FAT_FILE_TYPE_ROOT32;
    Root_firstCluster_ = SdVolume_rootDirStart_;
    if (!SdVolume_chainSize(Root_firstCluster_, &Root_fileSize_)) return false;
  } else {
    // volume is not initialized or FAT12
    return false;
  }

  // set to start of file
  Root_curCluster_ = 0;
  Root_curPosition_ = 0;

  // root has no directory entry
  Root_dirBlock_ = 0;
  Root_dirIndex_ = 0;
  return true;
}

void Root_rewind() {
  Root_curPosition_ = Root_curCluster_ = 0;
}

int16_t Root_read2(uint8_t* buf, uint16_t nbyte) {
  uint8_t* dst = buf;

  // max bytes left in file
  if (nbyte > (Root_fileSize_ - Root_curPosition_)) nbyte = Root_fileSize_ - Root_curPosition_;

  // amount left to read
  uint16_t toRead = nbyte;
  while (toRead > 0) {
    uint32_t block;  // raw device block number
    uint16_t offset = Root_curPosition_ & 0X1FF;  // offset in block
    if (Root_type_ == FAT_FILE_TYPE_ROOT16) {
      block = SdVolume_rootDirStart_ + (Root_curPosition_ >> 9);
    } else {
      uint8_t blockOfCluster = SdVolume_blockOfCluster(Root_curPosition_);
      if (offset == 0 && blockOfCluster == 0) {
        // start of new cluster
        if (Root_curPosition_ == 0) {
          // use first cluster in file
          Root_curCluster_ = Root_firstCluster_;
        } else {
          // get next cluster from FAT
          if (!SdVolume_fatGet(Root_curCluster_, &Root_curCluster_)) return -1;
        }
      }
      block = SdVolume_clusterStartBlock(Root_curCluster_) + blockOfCluster;
    }
    uint16_t n = toRead;

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;

    // no buffering needed if n == 512 or user requests no buffering
    if ((n == 512) && block != SdVolume_cacheBlockNumber_) {
      if (!Sd2Card_readData(block, offset, n, dst)) return -1;
      dst += n;
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume_cacheRawBlock(block, CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume_cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    }
    Root_curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
}

int16_t Root_read() {
  uint8_t b;
  return Root_read2(&b, 1) == 1 ? b : -1;
}

//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* Root_readDirCache(void) {
  // error if not directory
  //if (!isDir()) return NULL;

  // index of entry in cache
  uint8_t i = (Root_curPosition_ >> 5) & 0XF;

  // use read to locate and cache block
  if (Root_read() < 0) return NULL;

  // advance to next entry
  Root_curPosition_ += 31;

  // return pointer to entry
  return (SdVolume_cacheBuffer_.dir + i);
}
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t Root_addCluster() {
  if (!SdVolume_allocContiguous(&Root_curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (Root_firstCluster_ == 0) {
    Root_firstCluster_ = Root_curCluster_;
    Root_flags_ = 1;
  }
  return true;
}

//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// return with first block of cluster in the cache
uint8_t Root_addDirCluster(void) {
  if (!Root_addCluster()) return false;

  // zero data in cluster insure first cluster is in cache
  uint32_t block = SdVolume_clusterStartBlock(Root_curCluster_);
  for (uint8_t i = SdVolume_blocksPerCluster_; i != 0; i--) {
    if (!SdVolume_cacheZeroBlock(block + i - 1)) return false;
  }
  // Increase directory file size by cluster size
  Root_fileSize_ += 512UL << SdVolume_clusterSizeShift_;
  return true;
}














class SdFile {
 public:
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
  //bool writeError;
  uint8_t close(void);
  //uint32_t curPosition(void) const {return curPosition_;}
  //uint32_t fileSize(void) const {return fileSize_;}
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}

  uint8_t open02(const char* fileName);
  int16_t read(void) {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
  }
  
  int16_t read(void* buf, uint16_t nbyte);
  
  uint8_t seekCur(uint32_t pos) {
    return seekSet(curPosition_ + pos);
  }
  uint8_t seekSet(uint32_t pos);
  uint8_t sync(void);
  uint8_t type(void) const {return type_;}
  uint8_t truncate(uint32_t size);
  size_t write(uint8_t b);
  size_t write(const void* buf, uint16_t nbyte);
  size_t write(const char* str);
  //void write_P(PGM_P str);
  //void writeln_P(PGM_P str);
//------------------------------------------------------------------------------

  // private data
  uint8_t   flags_;         // is F_FILE_DIR_DIRTY
  uint8_t   type_;          // type of file see above for values
  uint32_t  curCluster_;    // cluster for current file position
  uint32_t  curPosition_;   // current file position in bytes from beginning
  uint32_t  dirBlock_;      // SD block that contains directory entry for file
  uint8_t   dirIndex_;      // index of entry in dirBlock 0 <= dirIndex_ <= 0XF
  uint32_t  fileSize_;      // file size in bytes
  uint32_t  firstCluster_;  // first cluster of file

  // private functions
  uint8_t addCluster(void);
  dir_t* cacheDirEntry(uint8_t action);
  uint8_t openCachedEntry(uint8_t cacheIndex);
};



//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
  if (!SdVolume_allocContiguous(&curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    flags_ = 1;
  }
  return true;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume_cacheRawBlock(dirBlock_, action)) return NULL;
  return SdVolume_cacheBuffer_.dir + dirIndex_;
}

uint8_t SdFile::close(void) {
  if (!sync())return false;
  type_ = FAT_FILE_TYPE_CLOSED;
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdFile::open02(const char* dname) {
  dir_t* p;

  Root_rewind();

  // bool for empty entry found
  uint8_t emptyFound = false;

  // search for file
  while (Root_curPosition_ < Root_fileSize_) {
    uint8_t index = 0XF & (Root_curPosition_ >> 5);
    p = Root_readDirCache();
    if (p == NULL){errCode = 103;return false;}

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
      // remember first empty slot
      if (!emptyFound) {
        emptyFound = true;
        dirIndex_ = index;
        dirBlock_ = SdVolume_cacheBlockNumber_;
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    } else if (!memcmp(dname, p->name, 11)) {

      // open found file
      return openCachedEntry(0XF & index);
    }
  }

  // cache found slot or add cluster if end of file
  if (emptyFound) {
    p = cacheDirEntry(CACHE_FOR_WRITE);
    if (!p){errCode = 106; return false;}
  } else {
    if (Root_type_ == FAT_FILE_TYPE_ROOT16){errCode = 107;  return false;}

    // add and zero cluster for root - first cluster is in cache for write
    if (!Root_addDirCluster()){errCode = 108;  return false;}

    // use first entry in cluster
    dirIndex_ = 0;
    p = SdVolume_cacheBuffer_.dir;
  }
  // initialize as empty file
  memset(p, 0, sizeof(dir_t));
  memcpy(p->name, dname, 11);

  // force write of entry to SD
  if (!SdVolume_cacheFlush()){errCode = 109;  return false;}

  // open entry in cache
  return openCachedEntry(dirIndex_);
}
//------------------------------------------------------------------------------
// open a cached directory entry. Assumes vol_ is initializes
uint8_t SdFile::openCachedEntry(uint8_t dirIndex) {
  // location of entry in cache
  dir_t* p = SdVolume_cacheBuffer_.dir + dirIndex;

  // remember location of directory entry on SD
  dirIndex_ = dirIndex;
  dirBlock_ = SdVolume_cacheBlockNumber_;

  // copy first cluster number for directory fields
  firstCluster_ = (uint32_t)p->firstClusterHigh << 16;
  firstCluster_ |= p->firstClusterLow;

  // make sure it is a normal file or subdirectory
  fileSize_ = p->fileSize;
  type_ = FAT_FILE_TYPE_NORMAL;

  // set to start of file
  curCluster_ = 0;
  curPosition_ = 0;
  return true;
}


//------------------------------------------------------------------------------
/**
 * Read data from a file starting at the current position.
 *
 * \param[out] buf Pointer to the location that will receive the data.
 *
 * \param[in] nbyte Maximum number of bytes to read.
 *
 * \return For success read() returns the number of bytes read.
 * A value less than \a nbyte, including zero, will be returned
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int16_t SdFile::read(void* buf, uint16_t nbyte) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint16_t toRead = nbyte;
  while (toRead > 0) {
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    if (type_ == FAT_FILE_TYPE_ROOT16) {
      block = SdVolume_rootDirStart_ + (curPosition_ >> 9);
    } else {
      uint8_t blockOfCluster = SdVolume_blockOfCluster(curPosition_);
      if (offset == 0 && blockOfCluster == 0) {
        // start of new cluster
        if (curPosition_ == 0) {
          // use first cluster in file
          curCluster_ = firstCluster_;
        } else {
          // get next cluster from FAT
          if (!SdVolume_fatGet(curCluster_, &curCluster_)) return -1;
        }
      }
      block = SdVolume_clusterStartBlock(curCluster_) + blockOfCluster;
    }
    uint16_t n = toRead;

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;

    // no buffering needed if n == 512 or user requests no buffering
    if ((n == 512) && block != SdVolume_cacheBlockNumber_) {
      if (!Sd2Card_readData(block, offset, n, dst)) return -1;
      dst += n;
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume_cacheRawBlock(block, CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume_cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
}
//------------------------------------------------------------------------------
/**
 * Sets a file's position.
 *
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_){errCode = 80;  return false;}

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (SdVolume_clusterSizeShift_ + 9);
  uint32_t nNew = (pos - 1) >> (SdVolume_clusterSizeShift_ + 9);

  if (nNew < nCur || curPosition_ == 0) {
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (!SdVolume_fatGet(curCluster_, &curCluster_)){errCode = 81;  return false;}
  }
  curPosition_ = pos;
  return true;
}
//------------------------------------------------------------------------------
/**
 * The sync() call causes all modified data and directory fields
 * to be written to the storage device.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_) {
    dir_t* d = cacheDirEntry(CACHE_FOR_WRITE);
    if (!d) return false;

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;

    // clear directory dirty
    flags_ = 0;
  }
  return SdVolume_cacheFlush();
}
//------------------------------------------------------------------------------
/**
 * Write data to an open file.
 *
 * \note Data is moved to the cache but may not be written to the
 * storage device until sync() is called.
 *
 * \param[in] buf Pointer to the location of the data to be written.
 *
 * \param[in] nbyte Number of bytes to write.
 *
 * \return For success write() returns the number of bytes written, always
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
  // convert void* to uint8_t*  -  must be before goto statements
  const uint8_t* src = reinterpret_cast<const uint8_t*>(buf);

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  while (nToWrite > 0) {
    uint8_t blockOfCluster = SdVolume_blockOfCluster(curPosition_);
    uint16_t blockOffset = curPosition_ & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (curCluster_ == 0) {
        if (firstCluster_ == 0) {
          // allocate first cluster of file
          if (!addCluster())   return 0;
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!SdVolume_fatGet(curCluster_, &next)) return false;
        if (SdVolume_isEOC(next)) {
          // add cluster if at end of chain
          if (!addCluster())   return 0;
        } else {
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = SdVolume_clusterStartBlock(curCluster_) + blockOfCluster;
    if (n == 512) {
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume_cacheBlockNumber_ == block) {
        SdVolume_cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!Sd2Card_writeBlock(block, src)) return 0;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume_cacheFlush()) return 0;
        SdVolume_cacheBlockNumber_ = block;
        SdVolume_cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume_cacheRawBlock(block, CACHE_FOR_WRITE)) {
          return 0;
        }
      }
      uint8_t* dst = SdVolume_cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ = 1;
  }

  return nbyte;

}
//------------------------------------------------------------------------------
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
  return write(&b, 1);
}
//------------------------------------------------------------------------------
/**
 * Write a string to a file. Used by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(const char* str) {
  return write(str, strlen(str));
}
//------------------------------------------------------------------------------
/**
 * Write a PROGMEM string to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
//void SdFile::write_P(PGM_P str) {
//  for (uint8_t c; (c = pgm_read_byte(str)); str++) write(c);
//}
//------------------------------------------------------------------------------
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
//void SdFile::writeln_P(PGM_P str) {
//  write_P(str);
//  println();
//}




class SDClass {

public:
  // These are required for initialisation and use of sdfatlib
  SdFile root;
  SdFile sdfile;
  
  uint8_t begin() {
    if(!Sd2Card_cardinit())return false;
    if(!SdVolume_volumeinit(1))
    {
        if(!SdVolume_volumeinit(0))
        {
          return false;
        }
    }
    return Root_openRoot();
  }

  // 1 for append to end , 0 for read/write from start
  uint8_t openSimple(const char *filepath, uint8_t toend) {
    // Open the file itself
    

    if (!sdfile.open02(filepath)) {
      // failed to open the file :(
      return 0;
    }

    if (toend) 
      sdfile.seekSet(sdfile.fileSize_);
    
    return 1;
  }

private:
  
  friend class File;
};


SDClass SD;

PROGMEM prog_uint8_t datas[] = "\r\n#include <Arduino.h>\r\n#include <avr/pgmspace.h>\r\n#include <stdint.h>\r\n\r\n\r\n#include <avr/io.h>\r\n\r\nuint8_t errCode = 0;\r\n\r\ninline void _dly()\r\n{\r\n  for(uint8_t i=0;i<5;i++)//5 is good\r\n  {\r\n    volatile uint8_t t;\r\n    t=0;\r\n  }\r\n}\r\n\r\n//B4\r\nvoid SPI_MOSI_INIT(){PORTB &= ~_BV(4);_dly();}\r\nvoid SPI_MOSI_HIGH(){DDRB &= ~_BV(4);_dly();}\r\nvoid SPI_MOSI_LOW(){DDRB |= _BV(4);_dly();}\r\n\r\n//B2\r\nvoid SPI_MISO_INIT(){PORTB &= ~_BV(2);DDRB &= ~_BV(2);_dly();}\r\nuint8_t SPI_MISO_GET(){return (~PINB) & _BV(2);}\r\n\r\n//B3\r\nvoid SPI_SCK_INIT(){PORTB &= ~_BV(3);_dly();}\r\nvoid SPI_SCK_HIGH(){DDRB &= ~_BV(3);_dly();}\r\nvoid SPI_SCK_LOW(){DDRB |= _BV(3);_dly();}\r\n\r\n//C0\r\nvoid SPI_CHIP_SELECT_INIT(){PORTC &= ~_BV(0);_dly();}\r\nvoid SPI_CHIP_SELECT_HIGH()";


char filename[12];


void setup(){
  Serial.begin(115200);
  DDRD &= ~_BV(6);//pwrPIN;
  
  while (!SD.begin()) {
    Serial.println("SD not ready.");
    delay(1000);
  }
  Serial.println("SD ok.");
}


void loop()
{
    uint8_t inByte = Serial.read();
    if(inByte=='r'){
      filename[0] = 'R';
      filename[1] = 'E';
      filename[2] = 'A';
      filename[3] = 'D';
      filename[4] = 'F';
      filename[5] = 'I';
      filename[6] = 'L';
      filename[7] = 'E';
      filename[8] = 'T';
      filename[9] = 'X';
      filename[10] = 'T';
      filename[11] = '\0';
      Serial.println("read.");
      if (SD.openSimple(filename, 0)) {
        for(uint16_t i=0;i<10000;i++){
          int cc = SD.sdfile.read();
          if(cc!=0 && cc!=-1){
            Serial.write(cc);
          }else
          {
            break;
          }
          
        }
        SD.sdfile.close();
        Serial.println("done.");
      }
      else {
        Serial.println("error.");
      }
      
    }
    if(inByte=='w'){
      int16_t n;
      while((n=Serial.read())==-1){
      }
      filename[0] = (uint8_t)n;
      filename[1] = 'R';
      filename[2] = 'I';
      filename[3] = 'T';
      filename[4] = 'E';
      filename[5] = 'F';
      filename[6] = 'I';
      filename[7] = 'L';
      filename[8] = 'T';
      filename[9] = 'X';
      filename[10] = 'T';
      filename[11] = '\0';
      Serial.println("write.");
      if (SD.openSimple(filename, 0)) {
        for(uint16_t i=0;i<700;i++){
          char cc = pgm_read_byte_near(datas+i);
          Serial.write(cc);
          SD.sdfile.write(cc);
        }
        SD.sdfile.sync();
        SD.sdfile.close();
        Serial.println("done.");
      }
      else {
        Serial.println("error.");
      }
    }

}













