
PROGMEM prog_uint8_t _Block[] = {
  0x007,0x000,0x003,0x000,0x003,0x000,0x006,0x000, 0x025,0x042,0x000,0x000,0x000,0x000,0x000,0x000, //;0
  0x007,0x000,0x003,0x000,0x003,0x000,0x006,0x000, 0x025,0x042,0x000,0x000,0x000,0x000,0x000,0x000, //;1 1
  0x09B,0x000,0x0A8,0x000,0x000,0x000,0x000,0x000, 0x09B,0x000,0x0A8,0x000,0x000,0x000,0x000,0x000, //;2
  0x09B,0x000,0x0A8,0x000,0x000,0x000,0x000,0x000, 0x09B,0x000,0x0A8,0x000,0x000,0x000,0x000,0x000, //;3 2
  0x070,0x000,0x0AB,0x000,0x006,0x000,0x000,0x000, 0x095,0x000,0x080,0x004,0x000,0x000,0x000,0x000, //;4
  0x070,0x000,0x0AB,0x000,0x006,0x000,0x000,0x000, 0x095,0x000,0x080,0x004,0x000,0x000,0x000,0x000, //;5 3
  0x007,0x000,0x098,0x000,0x060,0x000,0x000,0x000, 0x0B0,0x004,0x0A5,0x000,0x000,0x000,0x000,0x000, //;6
  0x007,0x000,0x098,0x000,0x060,0x000,0x000,0x000, 0x0B0,0x004,0x0A5,0x000,0x000,0x000,0x000,0x000, //;7 4
  0x007,0x000,0x003,0x000,0x048,0x000,0x000,0x000, 0x000,0x007,0x025,0x00A,0x000,0x000,0x000,0x000, //;8
  0x095,0x000,0x030,0x000,0x060,0x000,0x000,0x000, 0x02B,0x004,0x006,0x000,0x000,0x000,0x000,0x000, //;9 5
  0x04B,0x000,0x003,0x000,0x006,0x000,0x000,0x000, 0x007,0x000,0x028,0x004,0x000,0x000,0x000,0x000, //;A
  0x070,0x000,0x030,0x000,0x0A5,0x000,0x000,0x000, 0x025,0x009,0x000,0x006,0x000,0x000,0x000,0x000, //;B 6
  0x007,0x000,0x04E,0x000,0x006,0x000,0x000,0x000, 0x070,0x000,0x0F5,0x004,0x000,0x000,0x000,0x000, //;C
  0x070,0x000,0x0C5,0x000,0x060,0x000,0x000,0x000, 0x0D5,0x004,0x060,0x000,0x000,0x000,0x000,0x000  //;D 7
};

PROGMEM  prog_uint8_t  _Bottom[] = {
  0x011,0x011,0x004,0x000,0x011,0x011,0x004,0x000, 0x022,0x000,0x022,0x000,0x022,0x000,0x022,0x000, //E 1 2
  0x022,0x001,0x032,0x000,0x022,0x001,0x032,0x000, 0x021,0x002,0x023,0x000,0x021,0x002,0x023,0x000, //F 3 4
  0x011,0x002,0x033,0x000,0x022,0x002,0x013,0x000, 0x012,0x001,0x031,0x000,0x022,0x002,0x033,0x000, //0 5 6
  0x021,0x001,0x032,0x000,0x022,0x002,0x023,0x000                                                   //1 7
};
PROGMEM  prog_uint8_t  _Left[] = {
  0x014,0x014,0x022,0x022,0x023,0x023,0x023,0x023, 0x023,0x023,0x023,0x023,0x023,0x023              //2 1 2 3 4 5 6 7
};

//01531567876B3BE8
PROGMEM  prog_uint8_t  _Conv1[] = {
  0x000,0x001,0x005,0x003,0x001,0x005,0x006,0x007, 0x008,0x007,0x006,0x00B,0x003,0x00B,0x00E,0x008
};

//0143416769A7C93A
PROGMEM  prog_uint8_t  _Conv2[] = {
  0x000,0x001,0x004,0x003,0x004,0x001,0x006,0x007, 0x006,0x009,0x00A,0x007,0x00C,0x009,0x003,0x00A
};

void Init()
{
  //init Board
  for(byte j=0;j<20;j++)
  {
    for(byte i=0;i<10;i++)
    {
      Board[i+j*10] = 0;
    }
  }
  NextShape();
  NextShape();
  DrawNextShape();
  DrawBoard();
}

void timing()
{
  slowdown();
}

void rotate()
{
  NowShapeRotateIdx=(NowShapeRotateIdx+1)%4;

  byte left = GetLeft(NowShapeNum,NowShapeRotateIdx);
  if(left+PosX>10)
  {
    byte oldPosX=PosX;
    PosX=10-left;
    if(Any_Touch())
    {
      PosX = oldPosX;
      NowShapeRotateIdx=(NowShapeRotateIdx+3)%4;//-1 rotateback
    }
    return;
  }
  if(Any_Touch())
  {
    NowShapeRotateIdx=(NowShapeRotateIdx+3)%4;//-1 rotateback
  }
}

void Move(byte n)//+1 255
{
  PosX+=n;
  if(Any_Touch())
  {
    PosX-=n;
  }
}

void slowdown()
{
  if(Touch())
  {
    TouchDo();
  }
  PosY--;
}

void down()
{
  while(!Touch())
  {
    PosY--;
  }
  TouchDo();
}

boolean Touch()
{
  for(byte i=0;i<4;i++)
  {
    byte bottom = GetBottom(NowShapeNum,NowShapeRotateIdx,i);
    if(bottom!=0)
    {
      if(bottom==PosY+1)
      {
        return true;
      }
      if(Board[PosX+i+(PosY-bottom)*10]!=0)
      {
        return true;
      }
    }
  }
  return false;
}


boolean Any_Touch()
{
  if(PosX<0)
  {
    return true;
  }
  byte left = GetLeft(NowShapeNum,NowShapeRotateIdx);
  if(left+PosX>10)
  {
    return true;
  }
  for(byte i=0;i<4;i++)
  {
    for(byte j=0;j<4;j++)
    {
      byte x=PosX+i;
      byte y=PosY-j;
      byte  bottom = GetBottom(NowShapeNum,NowShapeRotateIdx,i);
      if(PosY-bottom<-1)
      {
        return true;
      }
      byte  block = GetBlock(NowShapeNum,NowShapeRotateIdx,i,j);
      if(x>=0&&y>=0&&x<10&&y<20&&block!=0&&Board[x+y*10]!=0)
      {
        return true;
      }
    }
  }
  return false;
}


void TouchDo()
{
  //add to board
  for(byte i=0;i<4;i++)
  {
    for(byte j=0;j<4;j++)
    {
      byte x=PosX+i;
      byte y=PosY-j;
      byte block = GetBlock(NowShapeNum,NowShapeRotateIdx,i,j);
      if(block!=0)
      {
        Board[x+y*10]=block;
      }
    }
  }

  //clear line
  for(byte j=19;j!=255;j--)
  {
    byte line=1;
    for(byte i=0;i<10;i++)
    {
      if(Board[i+j*10]==0)
      {
        line=0;
        break;
      }
    }
    if(line==1)
    {
      for(byte k=0;k<10;k++)
      {
        if(j-1>=0)
        {
          Board[k+(j-1)*10] = pgm_read_byte_near(_Conv1+Board[k+(j-1)*10]);
        }
        if(j+1<20)
        {
          Board[k+(j+1)*10] = pgm_read_byte_near(_Conv2+Board[k+(j+1)*10]);
        }
        Board[k+j*10]=0;
      }
      for(byte k=j;k<19;k++)
      {
        for(byte l=0;l<10;l++)
        {
          Board[l+k*10]=Board[l+(k+1)*10];
        }
      }
    }
  }

  //is gameover
  for(byte i=0;i<10;i++)
  {
    if(Board[i+180]!=0)
    {
      Clear();
      break;
    }
  }

  NextShape();
  DrawNextShape();
}


void NextShape()
{
  NowShapeNum = NextShapeNum;
  NextShapeNum = random(0, 6);//Math.floor(Math.random()*7);
  NowShapeRotateIdx = 0;
  PosY = 19;
  PosX = 3;
}


void Clear()
{
  for(byte i=0;i<10;i++)
  {
    for(byte j=0;j<20;j++)
    {
      Board[i+j*10]=0;
    }
  }
}

byte GetBlock(byte num,byte idx,byte i,byte j)
{
  byte ret;
  if((j&1)==1)
  {
    ret = (pgm_read_byte_near(_Block+num*32+idx*8+i*2+(j>>1))>>4)&0x0F;
  }
  else
  {
    ret = pgm_read_byte_near(_Block+num*32+idx*8+i*2+(j>>1))&0x0F;
  }
  return ret;
}

byte GetBottom(byte num,byte idx,byte j)
{
  byte ret;
  if((j&1)==1)
  {
    ret = (pgm_read_byte_near(_Bottom+num*8+idx*2+(j>>1))>>4)&0x0F;
  }
  else
  {
    ret = pgm_read_byte_near(_Bottom+num*8+idx*2+(j>>1))&0x0F;
  }
  return ret;
}

byte GetLeft(byte num,byte idx)
{
  byte ret;
  if((idx&1)==1)
  {
    ret = (pgm_read_byte_near(_Left+num*2+(idx>>1))>>4)&0x0F;
  }
  else
  {
    ret = pgm_read_byte_near(_Left+num*2+(idx>>1))&0x0F;
  }
  return ret;
}





