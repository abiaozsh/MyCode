#include <avr/io.h>
#include <avr/pgmspace.h>
#include <avr/interrupt.h>

#define IRPIN (PINB & _BV(4))
#define currTick ((TIFR1 & _BV(TOV1))?0x0FFFF:TCNT1)

PROGMEM prog_uint8_t datas[] = {
255,0,1,
255,1,0,
254,2,0,
252,4,0,
249,6,0,
245,9,1,
240,12,3,
234,16,5,
227,20,7,
219,25,10,
211,30,14,
201,35,17,
192,41,22,
181,47,26,
170,53,31,
159,60,37,
148,67,42,
136,75,49,
125,82,55,
113,90,62,
102,97,68,
90,105,76,
79,113,83,
69,122,90,
59,130,98,
49,138,106,
40,146,114,
32,154,122,
25,162,130,
18,169,137,
13,177,145,
8,184,153,
4,192,161,
2,198,168,
0,205,176,
0,211,183,
0,217,190,
2,223,197,
4,228,203,
8,233,210,
12,237,216,
18,241,221,
24,245,226,
32,248,231,
40,250,236,
49,252,240,
58,254,243,
68,255,246,
79,255,249,
90,255,251,
101,255,253,
112,254,254,
124,252,255,
136,250,255,
147,248,255,
159,245,255,
170,241,253,
181,237,252,
191,233,250,
201,228,247,
210,223,244,
219,218,240,
226,212,237,
233,205,232,
239,199,227,
245,192,222,
249,185,217,
252,177,211,
254,170,205,
255,162,198,
255,154,192,
254,146,185,
252,138,177,
249,130,170,
245,122,162,
240,114,155,
234,106,147,
227,98,139,
220,90,131,
211,82,123,
202,75,115,
192,68,107,
182,61,100,
171,54,92,
160,47,84,
149,41,77,
137,35,70,
126,30,63,
114,25,56,
102,20,50,
91,16,44,
80,12,38,
70,9,32,
59,6,27,
50,4,22,
41,2,18,
33,1,14,
25,0,11,
19,0,8,
13,0,5,
8,0,3,
5,2,1,
2,3,0,
0,6,0,
0,8,0,
0,12,0,
1,15,1,
4,19,2,
7,24,4,
12,29,6,
17,34,9,
24,40,12,
31,46,16,
39,52,20,
48,59,24,
57,66,29,
67,73,34,
78,81,40,
89,88,46,
100,96,52,
112,104,59,
123,112,65,
135,120,72,
146,128,80,
158,136,87,
169,144,95,
180,152,102,
190,160,110,
200,168,118,
209,176,126,
218,183,134,
226,190,142,
233,197,150,
239,204,157,
244,210,165,
249,216,173,
252,222,180,
254,227,187,
255,232,194,
255,237,201,
255,241,207,
253,244,213,
250,247,219,
246,250,224,
241,252,229,
235,254,234,
228,255,238,
220,255,242,
212,255,245,
203,255,248,
193,254,250,
183,253,252,
172,251,254,
161,248,255,
150,245,255,
138,242,255,
126,238,255,
115,234,254,
103,229,253,
92,224,251,
81,218,248,
70,213,245,
60,206,242,
51,200,238,
42,193,234,
33,186,230,
26,179,225,
19,171,219,
13,163,214,
9,155,208,
5,148,201,
2,139,195,
0,131,188,
0,123,181,
0,115,173,
1,107,166,
4,99,158,
7,91,151,
12,84,143,
17,76,135,
23,69,127,
31,62,119,
39,55,111,
47,48,103,
57,42,95,
67,36,88,
77,31,80,
88,26,73,
99,21,66,
111,17,59,
122,13,53,
134,9,46,
146,7,40,
157,4,35,
168,2,29,
179,1,25,
189,0,20,
199,0,16,
209,0,12,
217,0,9,
225,1,6,
232,3,4,
239,5,2,
244,8,1,
248,11,0,
252,15,0,
254,19,0,
255,23,0,
255,28,1,
255,33,3,
253,39,5,
250,45,7,
246,51,10,
241,58,14,
235,65,18,
228,72,22,
221,80,27,
213,87,32,
203,95,37,
194,103,43,
184,111,49,
173,119,56,
162,127,62,
150,135,69,
139,143,76,
127,151,84,
116,159,91,
104,167,99,
93,175,107,
82,182,114,
71,189,122,
61,196,130,
51,203,138,
42,209,146,
34,215,154,
26,221,162,
20,226,169,
14,231,177,
9,236,184,
5,240,191,
2,244,198,
0,247,204,
0,249,210,
0,252,216,
1,253,222,
3,255,227,
7,255,232,
11,255,236,
17,255,240,
23,254,244,
30,253,247,
38,251,249,
47,249,252,
56,246,253,
66,243,255,
76,239,255,
87,235,255,
98,230,255,
110,225,255,
121,219,253,
133,214,252,
145,207,249,
156,201,247,
167,194,244,
178,187,240,
189,180,236,
199,172,232,
208,165,227,
217,157,222,
225,149,216,
232,141,210,
238,133,204,
244,125,198,
248,117,191,
251,108,184,
254,100,177,
255,93,169,
255,85,162,
255,77,154,
253,70,146,
250,63,138,
246,56,130,
241,49,123,
236,43,115,
229,37,107,
221,32,99,
213,26,91,
204,22,84,
195,17,76,
184,13,69,
174,10,62,
163,7,56,
151,5,49,
140,3,43,
128,1,37,
117,0,32,
105,0,27,
94,0,22,
83,0,18,
72,1,14,
62,3,10,
52,5,7,
43,7,5,
35,10,3,
27,14,1,
20,18,0,
14,22,0,
9,27,0,
5,32,0,
2,38,1,
0,44,2,
0,50,4,
0,57,6,
1,64,9,
3,71,12,
7,78,16,
11,86,20,
16,94,25,
22,102,29,
29,110,35,
37,118,40,
46,126,46,
55,134,53,
65,142,59,
76,150,66,
86,158,73,
98,166,80,
109,173,88,
121,181,95,
132,188,103,
144,195,111,
155,202,119,
166,208,127,
177,214,135,
188,220,143,
198,226,150,
207,231,158,
216,235,166,
224,239,173,
231,243,181,
238,246,188,
243,249,195,
248,251,201,
251,253,208,
254,254,214,
255,255,219,
255,255,225,
255,255,230,
253,254,234,
250,253,238,
247,251,242,
242,249,245,
236,246,248,
229,243,251,
222,239,253,
214,235,254,
205,231,255,
195,226,255,
185,220,255,
175,215,255,
163,208,254,
152,202,252,
141,195,250,
129,188,248,
117,181,245,
106,174,242,
95,166,238,
83,158,234,
73,150,229,
62,142,224,
53,134,219,
44,126,213,
35,118,207,
27,110,201,
21,102,194,
15,94,187,
10,86,180,
6,79,173,
3,71,165,
1,64,158,
0,57,150,
0,50,142,
1,44,134,
3,38,126,
6,33,118,
11,27,110,
16,22,102,
22,18,95,
29,14,87,
37,11,80,
45,7,72,
55,5,65,
64,3,59,
75,1,52,
86,0,46,
97,0,40,
108,0,34,
120,0,29,
131,1,24,
143,2,20,
154,4,16,
166,7,12,
177,10,9,
187,13,6,
197,17,4,
207,22,2,
215,26,1,
224,31,0,
231,37,0,
237,43,0,
243,49,0,
247,56,1,
251,63,3,
254,70,5,
255,77,8,
255,85,11,
255,92,14,
253,100,18,
251,108,22,
247,116,27,
242,124,32,
237,132,38,
230,141,44,
223,149,50,
214,157,56,
206,164,63,
196,172,70,
186,180,77,
175,187,84,
164,194,92,
153,201,100,
142,207,107,
130,213,115,
118,219,123,
107,225,131,
95,230,139,
84,234,147,
73,239,155,
63,242,162,
53,246,170,
44,249,177,
36,251,184,
28,253,191,
21,254,198,
15,255,205,
10,255,211,
6,255,217,
3,255,222,
1,253,227,
0,252,232,
0,250,236,
1,247,240,
3,244,244,
6,240,247,
10,236,250,
15,232,252,
21,227,253,
28,221,255,
36,216,255,
45,209,255,
54,203,255,
64,196,254,
74,189,253,
85,182,251,
96,175,249,
107,167,247,
119,159,243,
130,151,240,
142,143,236,
154,135,231,
165,127,226,
176,119,221,
186,111,216,
196,103,210,
206,95,204,
215,87,197,
223,80,190,
230,72,183,
237,65,176,
242,58,169,
247,52,161,
251,45,153,
253,39,145,
255,33,138,
255,28,130,
255,23,122,
253,19,114,
251,15,106,
247,11,98,
243,8,91,
237,5,83,
231,3,76,
223,1,69,
215,0,62,
206,0,55,
197,0,49,
187,0,43,
176,1,37,
165,2,31,
154,4,26,
142,6,22,
131,9,17,
119,13,14,
108,17,10,
96,21,7,
85,26,5,
74,31,3,
64,36,1,
54,42,0,
45,48,0,
36,55,0,
29,61,0,
  
};



                  //     2      3      4      5      6      7      8      9     10     11
uint8_t indexD[] = {_BV(2),_BV(3),_BV(4),_BV(5),_BV(6),_BV(7),     0,     0,     0,     0};
uint8_t indexB[] = {     0,     0,     0,     0,     0,     0,_BV(0),_BV(1),_BV(2),_BV(3)};
uint8_t indexC[] = {_BV(0),_BV(1),_BV(2)};

uint8_t index3 = 0;
uint8_t index30 = 0;
uint8_t index10 = 0;

volatile uint16_t frameCountT=1;
volatile uint16_t frameCount1=0;
volatile uint16_t frameCount2=0;
volatile uint8_t dataC;
volatile uint8_t buff[30];

//占用timer0
/*
45 46 47
44 40 43
07 15 09
16 19 0D
0C 18 5E
08 1C 5A
42 52 4A
*/
uint8_t GetIR() {
  uint8_t data = 0;
  uint8_t datahi = 0;
  uint8_t dataidx = 0;
  uint8_t byteidx = 0;
  TCCR0A = 0;
  TCCR0B = 4;//1 0 0 clkI/O/256 (From prescaler)
  while(IRPIN);//等待低电平 下降沿
  DDRB|=_BV(5);
  PORTB|=_BV(5);
  while(!IRPIN);
  while(IRPIN);
  uint8_t OLDflg = IRPIN;
  TCNT0 = 0;
  TIMSK0 = 0;
  TIFR0 |= _BV(TOV0);
  while((!(TIFR0 & _BV(TOV0))) && (byteidx<4))
  {
    if(OLDflg != IRPIN)
    {
      if(IRPIN)
      {
      }
      else
      {
        //35~105 70
        data>>=1;
        if(TCNT0<70)
        {
          data|=0x80;
        }
        dataidx++;
        if(dataidx==8)
        {
          dataidx=0;
          switch(byteidx)
          {
            case 0:
              if(data!=0xFF)return 0xFF;
              break;
            case 1:
              if(data!=0x00)return 0xFF;
              break;
            case 2:
              datahi = ~data;
              break;
          }
          byteidx++;
        }
      }
      TCNT0 = 0;
      OLDflg = IRPIN;
    }
  }
  DDRB&=~_BV(5);
  PORTB&=~_BV(5);
  if(data!=datahi)
  {
    return 0xFF;
  }
  return data;
}

int main(void) {
  DDRD = _BV(2)|_BV(3)|_BV(4)|_BV(5)|_BV(6)|_BV(7);
  DDRB = _BV(0)|_BV(1)|_BV(2)|_BV(3);
  DDRC = _BV(0)|_BV(1)|_BV(2);
  
  //TCCR1A = 0;// | _BV(WGM11) | _BV(WGM10);// ; 
  //TCCR1B = 1;//0 0 1 clkI/O/1 (No prescaling)    16000000 / 8 / 512 / 30
  //2 0 0 1 0 PWM, Phase Correct, 9-bit 0x01FF TOP BOTTOM
  //WGM11
  
  
  TCCR1A = _BV(WGM11);
  TCCR1B = 1 | _BV(WGM13) | _BV(WGM12);
  ICR1 = 0x500;
  
  TIMSK1 = _BV(TOIE1) | _BV(OCIE1A) | _BV(OCIE1B);
  TCNT1 = 0;

  sei();
  
  uint8_t idx = 0;
  uint8_t color = 0;
  while(true){
    uint8_t val = GetIR();
    if(val==0)continue;
    
    switch(val){
      case 0x16:frameCountT = 10;break;
      case 0x0C:frameCountT = 1; break;
      case 0x18:frameCountT = 2; break;
      case 0x5E:frameCountT = 3; break;
      case 0x08:frameCountT = 4; break;
      case 0x1C:frameCountT = 5; break;
      case 0x5A:frameCountT = 6; break;
      case 0x42:frameCountT = 7; break;
      case 0x52:frameCountT = 8; break;
      case 0x4A:frameCountT = 9; break;
    }
    
  }
}

ISR(TIMER1_OVF_vect){
  //off
  PORTD |=  _BV(2)|_BV(3)|_BV(4)|_BV(5)|_BV(6)|_BV(7);
  PORTB |=  _BV(0)|_BV(1)|_BV(2)|_BV(3);
  //on
  PORTD &= ~indexD[index10];
  PORTB &= ~indexB[index10];
  
  if(buff[index30+index3]){
    dataC = indexC[index3];
  }
  else
  {
    dataC = 0;
  }

  index3++;
  if(index3==3){
    index3 = 0;
    index10++;
    index30+=3;
    if(index10==10){
      index10 = 0;
      index30 = 0;
      TCCR1B &= ~1;

      uint16_t idx = frameCount2;
      idx = idx + idx + idx;
      for(uint8_t i = 0;i<30;i+=3){
        buff[i+0] = pgm_read_byte_near(datas+(((i<<5)+idx+0)&511));
        buff[i+1] = pgm_read_byte_near(datas+(((i<<5)+idx+1)&511));
        buff[i+2] = pgm_read_byte_near(datas+(((i<<5)+idx+2)&511));
      }

      frameCount1++;
      if(frameCount1>=frameCountT){
      frameCount1 = 0;
      frameCount2++;
      if(frameCount2>=512)frameCount2=0;
      }
      TCCR1B |=  1;
    }
  }

  //Update of OCR1x at BOTTOM
  OCR1AH = 3;
  OCR1AL = buff[index30+index3];
  OCR1BH = 2;
  OCR1BL = 0xFE;
  
}
//open
ISR(TIMER1_COMPB_vect){
  PORTC |=  dataC;
}
//close
ISR(TIMER1_COMPA_vect){
  PORTC &= ~dataC;
}
