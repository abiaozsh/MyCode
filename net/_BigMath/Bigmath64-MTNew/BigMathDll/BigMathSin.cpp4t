//v1.2

#include <windows.h>
#include <process.h>

#define int __int64

extern "C" void add(int Precision, unsigned int* Num_Array, int* pSign, int* pExponent, unsigned int* num_Num_Array, int num_Sign, int num_Exponent);
extern "C" void mul(int Precision, unsigned int* Num_Array, int* pSign, int* pExponent, unsigned int* num_Num_Array, int num_Sign, int num_Exponent, unsigned int* buf_Num_Array);
extern "C" void divi(int Precision, unsigned int* Num_Array, int* pSign, int* pExponent, unsigned int* num_Num_Array, int num_Sign, int num_Exponent, unsigned int* r, unsigned int* b);
extern "C" void incr(unsigned int* Num_Array, int* pExponent);

unsigned int* clone(int Precision, unsigned int* Num_Array)
{
	
    unsigned int* ret = new unsigned int[Precision];
    for(int i=0;i<Precision;i++)
    {
        ret[i] = Num_Array[i];
    }
    return ret;
}

unsigned int* newArray(int Precision, unsigned int n)
{
    unsigned int* ret = new unsigned int[Precision];
    ret[0] = n;
    for(int i=1;i<Precision;i++)
    {
        ret[i] = 0;
    }
    return ret;
}


struct ArgList
{
    CRITICAL_SECTION cs1;
    int flag;

    int Precision;
    unsigned int* Num_Array;
    int Sign;
    int Exponent;

    unsigned int* r_value;
    unsigned int* b;

    unsigned int* num;
    int Snum;
    int Enum;

    unsigned int* num_i;
    int Snum_i;
    int Enum_i;

    unsigned int* num_a;
    int Snum_a;
    int Enum_a;

    unsigned int* num_b;
    int Snum_b;
    int Enum_b;

    unsigned int* num_x4;
    int Snum_x4;
    int Enum_x4;

    unsigned int* num2;
    int Snum2;
    int Enum2;
};

void sin_part1(LPVOID pParam)
{
    ArgList* argList = (ArgList*)pParam;
    EnterCriticalSection(&(argList->cs1));

    int limit = argList->Precision;

    //x4=x*x*x*x
    mul(limit, argList->num_x4, &argList->Snum_x4, &argList->Enum_x4, argList->num, argList->Snum, argList->Enum, argList->b);
    mul(limit, argList->num_x4, &argList->Snum_x4, &argList->Enum_x4, argList->num, argList->Snum, argList->Enum, argList->b);
    mul(limit, argList->num_x4, &argList->Snum_x4, &argList->Enum_x4, argList->num, argList->Snum, argList->Enum, argList->b);

    for (int i = 2 ; ; i+=2)
    {
        for(int idx = 0; idx < argList->Precision; idx++)
        {
            argList->num2[idx] = argList->num_a[idx];
        }
        argList->Snum2 = argList->Snum_a;
        argList->Enum2 = argList->Enum_a;

        //num2=a/b
        divi(limit, argList->num2, &argList->Snum2, &argList->Enum2, argList->num_b, argList->Snum_b, argList->Enum_b, argList->r_value, argList->b);

        if ((argList->Exponent) - argList->Enum2 > (argList->Precision - 2))
        {
            break;
        }

        //result+=num2
        add(argList->Precision, argList->Num_Array, &argList->Sign, &argList->Exponent, argList->num2, argList->Snum2, argList->Enum2);

        limit = argList->Precision - (argList->Exponent - argList->Enum2);

        if(limit > argList->Precision) limit = argList->Precision;
        if(limit <= 0) limit = 1;
   
        //a=a*x4
        mul(limit, argList->num_a, &argList->Snum_a, &argList->Enum_a, argList->num_x4, argList->Snum_x4, argList->Enum_x4, argList->b);

        //b=b*(i)*(i+1)*(i+2)*(i+3)
        //i++
        incr(argList->num_i, &argList->Enum_i);
        //b=b*i
        mul(limit, argList->num_b, &argList->Snum_b, &argList->Enum_b, argList->num_i, argList->Snum_i, argList->Enum_i, argList->b);
        //i++
        incr(argList->num_i, &argList->Enum_i);
        //b=b*i
        mul(limit, argList->num_b, &argList->Snum_b, &argList->Enum_b, argList->num_i, argList->Snum_i, argList->Enum_i, argList->b);
        //i++
        incr(argList->num_i, &argList->Enum_i);
        //b=b*i
        mul(limit, argList->num_b, &argList->Snum_b, &argList->Enum_b, argList->num_i, argList->Snum_i, argList->Enum_i, argList->b);
        //i++
        incr(argList->num_i, &argList->Enum_i);
        //b=b*i
        mul(limit, argList->num_b, &argList->Snum_b, &argList->Enum_b, argList->num_i, argList->Snum_i, argList->Enum_i, argList->b);

    }

    argList->flag = 1;

    LeaveCriticalSection(&(argList->cs1));
    return;
}

void sinMT(int Precision, unsigned int* Num_Array, int* pSign, int* pExponent)
{
    //TODO regular by pi

    ArgList* argList1 = new ArgList();
    InitializeCriticalSection(&(argList1->cs1));
    {
        argList1->flag = 0;
        argList1->r_value = new unsigned int[Precision + 2];
        argList1->b = new unsigned int[Precision];
        argList1->Precision = Precision;
        argList1->Num_Array = newArray(Precision, 0);
        argList1->Sign = 1;
        argList1->Exponent = 0;
        argList1->num = clone(Precision, Num_Array);
        argList1->Snum = (*pSign);
        argList1->Enum = (*pExponent);
        argList1->num_i = newArray(Precision, 3);
        argList1->Snum_i = 1;
        argList1->Enum_i = 1;
        argList1->num_a = clone(Precision, Num_Array);
        argList1->Snum_a = (*pSign);
        argList1->Enum_a = (*pExponent);
        mul(Precision, argList1->num_a, &argList1->Snum_a, &argList1->Enum_a, Num_Array, *pSign, *pExponent, argList1->b);
        mul(Precision, argList1->num_a, &argList1->Snum_a, &argList1->Enum_a, Num_Array, *pSign, *pExponent, argList1->b);
        argList1->num_b = newArray(Precision, 6);
        argList1->Snum_b = 1;
        argList1->Enum_b = 1;
        argList1->num_x4 = clone(Precision, Num_Array);
        argList1->Snum_x4 = (*pSign);
        argList1->Enum_x4 = (*pExponent);
        argList1->num2 = new unsigned int[Precision];
        argList1->Snum2 = 1;
        argList1->Enum2 = 1;
    }
    ArgList* argList2 = new ArgList();
    InitializeCriticalSection(&(argList2->cs1));
    {
        argList2->flag = 0;
        argList2->r_value = new unsigned int[Precision + 2];
        argList2->b = new unsigned int[Precision];
        argList2->Precision = Precision;
        argList2->Num_Array = newArray(Precision, 0);
        argList2->Sign = 1;
        argList2->Exponent = 0;
        argList2->num = clone(Precision, Num_Array);
        argList2->Snum = (*pSign);
        argList2->Enum = (*pExponent);
        argList2->num_i = newArray(Precision, 3);
        argList2->Snum_i = 1;
        argList2->Enum_i = 1;
        argList2->num_a = clone(Precision, Num_Array);
        argList2->Snum_a = (*pSign);
        argList2->Enum_a = (*pExponent);
        mul(Precision, argList2->num_a, &argList2->Snum_a, &argList2->Enum_a, Num_Array, *pSign, *pExponent, argList2->b);
        mul(Precision, argList2->num_a, &argList2->Snum_a, &argList2->Enum_a, Num_Array, *pSign, *pExponent, argList2->b);
        argList2->num_b = newArray(Precision, 6);
        argList2->Snum_b = 1;
        argList2->Enum_b = 1;
        argList2->num_x4 = clone(Precision, Num_Array);
        argList2->Snum_x4 = (*pSign);
        argList2->Enum_x4 = (*pExponent);
        argList2->num2 = new unsigned int[Precision];
        argList2->Snum2 = 1;
        argList2->Enum2 = 1;
    }
    ArgList* argList3 = new ArgList();
    InitializeCriticalSection(&(argList3->cs1));
    {
        argList3->flag = 0;
        argList3->r_value = new unsigned int[Precision + 2];
        argList3->b = new unsigned int[Precision];
        argList3->Precision = Precision;
        argList3->Num_Array = newArray(Precision, 0);
        argList3->Sign = 1;
        argList3->Exponent = 0;
        argList3->num = clone(Precision, Num_Array);
        argList3->Snum = (*pSign);
        argList3->Enum = (*pExponent);
        argList3->num_i = newArray(Precision, 3);
        argList3->Snum_i = 1;
        argList3->Enum_i = 1;
        argList3->num_a = clone(Precision, Num_Array);
        argList3->Snum_a = (*pSign);
        argList3->Enum_a = (*pExponent);
        mul(Precision, argList3->num_a, &argList3->Snum_a, &argList3->Enum_a, Num_Array, *pSign, *pExponent, argList3->b);
        mul(Precision, argList3->num_a, &argList3->Snum_a, &argList3->Enum_a, Num_Array, *pSign, *pExponent, argList3->b);
        argList3->num_b = newArray(Precision, 6);
        argList3->Snum_b = 1;
        argList3->Enum_b = 1;
        argList3->num_x4 = clone(Precision, Num_Array);
        argList3->Snum_x4 = (*pSign);
        argList3->Enum_x4 = (*pExponent);
        argList3->num2 = new unsigned int[Precision];
        argList3->Snum2 = 1;
        argList3->Enum2 = 1;
    }

    _beginthread(sin_part1, 0, argList1);
    _beginthread(sin_part1, 0, argList2);
    _beginthread(sin_part1, 0, argList3);

    //2±¶ÁÙÊ±¿Õ¼ä
    unsigned int* r_value = new unsigned int[Precision + 2];
    unsigned int* b = new unsigned int[Precision];

    unsigned int* num = clone(Precision, Num_Array);
    int Snum = (*pSign);
    int Enum = (*pExponent);

    unsigned int* num_i = newArray(Precision, 1);
    int Snum_i = 1;
    int Enum_i = 1;

    unsigned int* num_a = clone(Precision, Num_Array);
    int Snum_a = (*pSign);
    int Enum_a = (*pExponent);

    unsigned int* num_b = newArray(Precision, 1);
    int Snum_b = 1;
    int Enum_b = 1;

    unsigned int* num_x4 = clone(Precision, Num_Array);
    int Snum_x4 = (*pSign);
    int Enum_x4 = (*pExponent);

    unsigned int* num2 = new unsigned int[Precision];
    int Snum2 = 1;
    int Enum2 = 1;

    int limit = Precision;
    //x4=x*x*x*x
    mul(limit, num_x4, &Snum_x4, &Enum_x4, Num_Array, *pSign, *pExponent, b);
    mul(limit, num_x4, &Snum_x4, &Enum_x4, Num_Array, *pSign, *pExponent, b);
    mul(limit, num_x4, &Snum_x4, &Enum_x4, Num_Array, *pSign, *pExponent, b);
    for (int i = 1 ; ; i+=2)
    {
        //a=a*x4
        mul(limit, num_a, &Snum_a, &Enum_a, num_x4, Snum_x4, Enum_x4, b);

		if(i>44)
		{
			i++;
			i--;
		}
        //b=b*(i)*(i+1)*(i+2)*(i+3)
        //i++
        incr(num_i, &Enum_i);
        //b=b*i
        mul(limit, num_b, &Snum_b, &Enum_b, num_i, Snum_i, Enum_i, b);
        //i++
        incr(num_i, &Enum_i);
        //b=b*i
        mul(limit, num_b, &Snum_b, &Enum_b, num_i, Snum_i, Enum_i, b);
        //i++
        incr(num_i, &Enum_i);
        //b=b*i
        mul(limit, num_b, &Snum_b, &Enum_b, num_i, Snum_i, Enum_i, b);
        //i++
        incr(num_i, &Enum_i);
        //b=b*i
        mul(limit, num_b, &Snum_b, &Enum_b, num_i, Snum_i, Enum_i, b);

        for(int idx = 0; idx < Precision; idx++)
        {
            num2[idx] = num_a[idx];
        }
        Snum2 = Snum_a;
        Enum2 = Enum_a;

        //num2=a/b
        divi(limit, num2, &Snum2, &Enum2, num_b, Snum_b, Enum_b, r_value, b);

        if ((*pExponent) - Enum2 > (Precision - 2))
        {
            break;
        }
        //result+=num2
        add(Precision, Num_Array, pSign, pExponent, num2, Snum2, Enum2);

        limit = Precision - (*pExponent - Enum2);

        if(limit > Precision) limit = Precision;
        if(limit <= 0) limit = 1;
    }

    while(argList1->flag==0||argList2->flag==0||argList3->flag==0)
    {
        EnterCriticalSection(&(argList1->cs1));
        LeaveCriticalSection(&(argList1->cs1));
        EnterCriticalSection(&(argList2->cs1));
        LeaveCriticalSection(&(argList2->cs1));
        EnterCriticalSection(&(argList3->cs1));
        LeaveCriticalSection(&(argList3->cs1));
        Sleep(10);
    }

    DeleteCriticalSection(&(argList1->cs1));

    add(Precision, Num_Array, pSign, pExponent, argList1->Num_Array, -argList1->Sign, argList1->Exponent);
    add(Precision, Num_Array, pSign, pExponent, argList2->Num_Array, -argList2->Sign, argList2->Exponent);
    add(Precision, Num_Array, pSign, pExponent, argList3->Num_Array, -argList3->Sign, argList3->Exponent);

    delete argList1->Num_Array;
    delete argList1->r_value;
    delete argList1->b;
    delete argList1->num;
    delete argList1->num_i;
    delete argList1->num_a;
    delete argList1->num_b;
    delete argList1->num_x4;
    delete argList1->num2;

    delete argList2->Num_Array;
    delete argList2->r_value;
    delete argList2->b;
    delete argList2->num;
    delete argList2->num_i;
    delete argList2->num_a;
    delete argList2->num_b;
    delete argList2->num_x4;
    delete argList2->num2;

    delete argList3->Num_Array;
    delete argList3->r_value;
    delete argList3->b;
    delete argList3->num;
    delete argList3->num_i;
    delete argList3->num_a;
    delete argList3->num_b;
    delete argList3->num_x4;
    delete argList3->num2;


    delete r_value;
    delete b;
    delete num;
    delete num_i;
    delete num_a;
    delete num_b;
    delete num_x4;
    delete num2;
    delete argList1;
    delete argList2;
    delete argList3;
}

void sin(int Precision, unsigned int* Num_Array, int* pSign, int* pExponent)
{
    //TODO regular by pi

    //2±¶ÁÙÊ±¿Õ¼ä
    unsigned int* r_value = new unsigned int[Precision + 2];
    unsigned int* b = new unsigned int[Precision];

    unsigned int* num = clone(Precision, Num_Array);
    int Snum = (*pSign);
    int Enum = (*pExponent);

    unsigned int* num_i = newArray(Precision, 1);
    int Snum_i = 1;
    int Enum_i = 1;

    unsigned int* num_a = clone(Precision, Num_Array);
    int Snum_a = (*pSign);
    int Enum_a = (*pExponent);

    unsigned int* num_b = newArray(Precision, 1);
    int Snum_b = 1;
    int Enum_b = 1;

    unsigned int* num_x2 = clone(Precision, Num_Array);
    int Snum_x2 = (*pSign);
    int Enum_x2 = (*pExponent);

    unsigned int* num2 = newArray(Precision, 1);
    int Snum2 = 1;
    int Enum2 = 1;

    int limit = Precision;

    //x2=x*x
    mul(limit, num_x2, &Snum_x2, &Enum_x2, num, Snum, Enum, b);

    for (int i = 1 ; ; i++)
    {
        //a=a*x2
        mul(limit, num_a, &Snum_a, &Enum_a, num_x2, Snum_x2, Enum_x2, b);

        //b=b*(i)*(i+1)
        //i++
        incr(num_i, &Enum_i);
        //b=b*i
        mul(limit, num_b, &Snum_b, &Enum_b, num_i, Snum_i, Enum_i, b);
        //i++
        incr(num_i, &Enum_i);
        //b=b*i
        mul(limit, num_b, &Snum_b, &Enum_b, num_i, Snum_i, Enum_i, b);

        for(int idx = 0; idx < Precision; idx++)
        {
            num2[idx] = num_a[idx];
        }
        Snum2 = Snum_a;
        Enum2 = Enum_a;

        //num2=a/b
        divi(limit, num2, &Snum2, &Enum2, num_b, Snum_b, Enum_b, r_value, b);

        if (i % 2 == 1)
        {
            Snum2 = -Snum2;
        }

        if ((*pExponent) - Enum2 > (Precision - 2))
        {
            break;
        }
        //result+=num2
        add(Precision, Num_Array, pSign, pExponent, num2, Snum2, Enum2);

        limit = Precision - (*pExponent - Enum2);

        if(limit > Precision) limit = Precision;
        if(limit <= 0) limit = 1;
    }

    delete r_value;
    delete b;

    delete num;

    delete num_i;

    delete num_a;

    delete num_b;

    delete num_x2;

    delete num2;
}

extern "C" __declspec(dllexport) void N_Sin(int* PSE,unsigned int* Num_Array)
{
    int Precision = PSE[0];
    int Sign = PSE[1];
    int Exponent = PSE[2];

    if(Precision>50)
    {
        sin( Precision, Num_Array, &Sign, &Exponent);
    }
    else
    {
        sin( Precision, Num_Array, &Sign, &Exponent);
    }

    PSE[1] = Sign;
    PSE[2] = Exponent;
}